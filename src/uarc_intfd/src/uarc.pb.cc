// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uarc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "uarc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MsgScheduleValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgScheduleValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgSchedule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgSchedule_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgDevice_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgDevice_DeviceLinkType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgDevice_DeviceProtocol_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgDevice_DeviceStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgItemCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgItemCode_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgItemCode_ItemCodeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgItemCode_ItemSrcType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgItemCode_ItemWarnType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgItemCode_ItemCodeStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgItemCode_ItemStoreType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgCollTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCollTask_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgCollTask_TaskStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgCallData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgCallData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgBatchCallData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgBatchCallData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgControl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgControl_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgFormular_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgFormular_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgFormular_FormularPriority_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgFormular_FormularStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgResult_ResultCode_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MsgBatchResults_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgBatchResults_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgBatchResults_ResultBatchCode_descriptor_ = NULL;
const ::google::protobuf::ServiceDescriptor* UarcService_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_uarc_2eproto() {
  protobuf_AddDesc_uarc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "uarc.proto");
  GOOGLE_CHECK(file != NULL);
  MsgScheduleValue_descriptor_ = file->message_type(0);
  static const int MsgScheduleValue_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgScheduleValue, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgScheduleValue, termid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgScheduleValue, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgScheduleValue, scheduletime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgScheduleValue, schedulevalue_),
  };
  MsgScheduleValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgScheduleValue_descriptor_,
      MsgScheduleValue::default_instance_,
      MsgScheduleValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgScheduleValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgScheduleValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgScheduleValue));
  MsgSchedule_descriptor_ = file->message_type(1);
  static const int MsgSchedule_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSchedule, schedulevalues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSchedule, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSchedule, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSchedule, controltime_),
  };
  MsgSchedule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgSchedule_descriptor_,
      MsgSchedule::default_instance_,
      MsgSchedule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSchedule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgSchedule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgSchedule));
  MsgDevice_descriptor_ = file->message_type(2);
  static const int MsgDevice_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDevice, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDevice, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDevice, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDevice, identity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDevice, linktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDevice, protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDevice, heartbeat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDevice, status_),
  };
  MsgDevice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgDevice_descriptor_,
      MsgDevice::default_instance_,
      MsgDevice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDevice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgDevice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgDevice));
  MsgDevice_DeviceLinkType_descriptor_ = MsgDevice_descriptor_->enum_type(0);
  MsgDevice_DeviceProtocol_descriptor_ = MsgDevice_descriptor_->enum_type(1);
  MsgDevice_DeviceStatus_descriptor_ = MsgDevice_descriptor_->enum_type(2);
  MsgItemCode_descriptor_ = file->message_type(3);
  static const int MsgItemCode_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItemCode, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItemCode, unitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItemCode, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItemCode, itemtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItemCode, srctype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItemCode, uplimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItemCode, downlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItemCode, warntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItemCode, baseval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItemCode, coefficient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItemCode, daystoretime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItemCode, daystoresql_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItemCode, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItemCode, termid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItemCode, warnstoresql_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItemCode, seccollperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItemCode, seccollsql_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItemCode, seccollothersql_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItemCode, storetype_),
  };
  MsgItemCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgItemCode_descriptor_,
      MsgItemCode::default_instance_,
      MsgItemCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItemCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItemCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgItemCode));
  MsgItemCode_ItemCodeType_descriptor_ = MsgItemCode_descriptor_->enum_type(0);
  MsgItemCode_ItemSrcType_descriptor_ = MsgItemCode_descriptor_->enum_type(1);
  MsgItemCode_ItemWarnType_descriptor_ = MsgItemCode_descriptor_->enum_type(2);
  MsgItemCode_ItemCodeStatus_descriptor_ = MsgItemCode_descriptor_->enum_type(3);
  MsgItemCode_ItemStoreType_descriptor_ = MsgItemCode_descriptor_->enum_type(4);
  MsgCollTask_descriptor_ = file->message_type(4);
  static const int MsgCollTask_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCollTask, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCollTask, unitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCollTask, itemids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCollTask, startdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCollTask, freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCollTask, status_),
  };
  MsgCollTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCollTask_descriptor_,
      MsgCollTask::default_instance_,
      MsgCollTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCollTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCollTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCollTask));
  MsgCollTask_TaskStatus_descriptor_ = MsgCollTask_descriptor_->enum_type(0);
  MsgCallData_descriptor_ = file->message_type(5);
  static const int MsgCallData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCallData, unitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCallData, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCallData, termid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCallData, itemid_),
  };
  MsgCallData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgCallData_descriptor_,
      MsgCallData::default_instance_,
      MsgCallData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCallData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgCallData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgCallData));
  MsgBatchCallData_descriptor_ = file->message_type(6);
  static const int MsgBatchCallData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBatchCallData, unitids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBatchCallData, itemids_),
  };
  MsgBatchCallData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgBatchCallData_descriptor_,
      MsgBatchCallData::default_instance_,
      MsgBatchCallData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBatchCallData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBatchCallData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgBatchCallData));
  MsgControl_descriptor_ = file->message_type(7);
  static const int MsgControl_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControl, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControl, termid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControl, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControl, value_),
  };
  MsgControl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgControl_descriptor_,
      MsgControl::default_instance_,
      MsgControl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgControl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgControl));
  MsgFormular_descriptor_ = file->message_type(8);
  static const int MsgFormular_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFormular, formularid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFormular, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFormular, unitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFormular, expr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFormular, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFormular, mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFormular, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFormular, freq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFormular, status_),
  };
  MsgFormular_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgFormular_descriptor_,
      MsgFormular::default_instance_,
      MsgFormular_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFormular, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgFormular, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgFormular));
  MsgFormular_FormularPriority_descriptor_ = MsgFormular_descriptor_->enum_type(0);
  MsgFormular_FormularStatus_descriptor_ = MsgFormular_descriptor_->enum_type(1);
  MsgResult_descriptor_ = file->message_type(9);
  static const int MsgResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgResult, resultdoubleval_),
  };
  MsgResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgResult_descriptor_,
      MsgResult::default_instance_,
      MsgResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgResult));
  MsgResult_ResultCode_descriptor_ = MsgResult_descriptor_->enum_type(0);
  MsgBatchResults_descriptor_ = file->message_type(10);
  static const int MsgBatchResults_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBatchResults, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBatchResults, unitids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBatchResults, itemids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBatchResults, values_),
  };
  MsgBatchResults_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgBatchResults_descriptor_,
      MsgBatchResults::default_instance_,
      MsgBatchResults_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBatchResults, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBatchResults, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgBatchResults));
  MsgBatchResults_ResultBatchCode_descriptor_ = MsgBatchResults_descriptor_->enum_type(0);
  UarcService_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_uarc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgScheduleValue_descriptor_, &MsgScheduleValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgSchedule_descriptor_, &MsgSchedule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgDevice_descriptor_, &MsgDevice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgItemCode_descriptor_, &MsgItemCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCollTask_descriptor_, &MsgCollTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgCallData_descriptor_, &MsgCallData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgBatchCallData_descriptor_, &MsgBatchCallData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgControl_descriptor_, &MsgControl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgFormular_descriptor_, &MsgFormular::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgResult_descriptor_, &MsgResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgBatchResults_descriptor_, &MsgBatchResults::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_uarc_2eproto() {
  delete MsgScheduleValue::default_instance_;
  delete MsgScheduleValue_reflection_;
  delete MsgSchedule::default_instance_;
  delete MsgSchedule_reflection_;
  delete MsgDevice::default_instance_;
  delete MsgDevice_reflection_;
  delete MsgItemCode::default_instance_;
  delete MsgItemCode_reflection_;
  delete MsgCollTask::default_instance_;
  delete MsgCollTask_reflection_;
  delete MsgCallData::default_instance_;
  delete MsgCallData_reflection_;
  delete MsgBatchCallData::default_instance_;
  delete MsgBatchCallData_reflection_;
  delete MsgControl::default_instance_;
  delete MsgControl_reflection_;
  delete MsgFormular::default_instance_;
  delete MsgFormular_reflection_;
  delete MsgResult::default_instance_;
  delete MsgResult_reflection_;
  delete MsgBatchResults::default_instance_;
  delete MsgBatchResults_reflection_;
}

void protobuf_AddDesc_uarc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nuarc.proto\"q\n\020MsgScheduleValue\022\020\n\010devi"
    "ceId\030\001 \001(\005\022\016\n\006termId\030\002 \001(\005\022\016\n\006itemId\030\003 \001"
    "(\005\022\024\n\014scheduleTime\030\004 \003(\005\022\025\n\rscheduleValu"
    "e\030\005 \003(\001\"n\n\013MsgSchedule\022)\n\016scheduleValues"
    "\030\001 \003(\0132\021.MsgScheduleValue\022\014\n\004date\030\002 \001(\005\022"
    "\021\n\tstartTime\030\003 \001(\005\022\023\n\013controlTime\030\004 \001(\005\""
    "\350\003\n\tMsgDevice\022\020\n\010deviceId\030\001 \001(\005\022\017\n\007addre"
    "ss\030\002 \001(\t\022\014\n\004port\030\003 \001(\005\022\020\n\010identity\030\004 \001(\t"
    "\022+\n\010linkType\030\005 \001(\0162\031.MsgDevice.DeviceLin"
    "kType\022+\n\010protocol\030\006 \001(\0162\031.MsgDevice.Devi"
    "ceProtocol\022\021\n\theartBeat\030\007 \001(\005\022\'\n\006status\030"
    "\010 \001(\0162\027.MsgDevice.DeviceStatus\"_\n\016Device"
    "LinkType\022\022\n\016linkType_TCPIP\020\000\022\022\n\016linkType"
    "_RS485\020\001\022\020\n\014linkType_USB\020\002\022\023\n\017linkType_D"
    "BLINK\020\003\"e\n\016DeviceProtocol\022\032\n\026Protocol_ne"
    "wEnergyEffi\020\000\022\020\n\014Protocol_376\020\001\022\023\n\017Proto"
    "col_ModBus\020\002\022\020\n\014Protocol_104\020\003\":\n\014Device"
    "Status\022\025\n\021DeviceUnavailable\020\000\022\023\n\017DeviceA"
    "vailable\020\001\"\347\006\n\013MsgItemCode\022\016\n\006itemId\030\001 \001"
    "(\005\022\016\n\006unitId\030\002 \001(\t\022\020\n\010deviceId\030\003 \001(\005\022+\n\010"
    "itemType\030\004 \001(\0162\031.MsgItemCode.ItemCodeTyp"
    "e\022)\n\007srcType\030\005 \001(\0162\030.MsgItemCode.ItemSrc"
    "Type\022\017\n\007upLimit\030\006 \001(\001\022\021\n\tdownLimit\030\007 \001(\001"
    "\022+\n\010warnType\030\010 \001(\0162\031.MsgItemCode.ItemWar"
    "nType\022\017\n\007baseval\030\t \001(\001\022\023\n\013coefficient\030\n "
    "\001(\001\022\024\n\014dayStoreTime\030\013 \001(\t\022\023\n\013dayStoreSql"
    "\030\014 \001(\t\022+\n\006status\030\r \001(\0162\033.MsgItemCode.Ite"
    "mCodeStatus\022\016\n\006termId\030\016 \001(\005\022\024\n\014warnStore"
    "Sql\030\017 \001(\t\022\025\n\rsecCollPeriod\030\020 \001(\005\022\022\n\nsecC"
    "ollSQL\030\021 \001(\t\022\027\n\017secCollOtherSQL\030\022 \001(\t\022-\n"
    "\tstoreType\030\023 \001(\0162\032.MsgItemCode.ItemStore"
    "Type\"U\n\014ItemCodeType\022\025\n\021ItemCodeAnalogVa"
    "l\020\000\022\026\n\022ItemCodeDigitalVal\020\001\022\026\n\022ItemCodeD"
    "isplayVal\020\002\"5\n\013ItemSrcType\022\021\n\rDeviceColl"
    "ect\020\000\022\023\n\017CalculateResult\020\001\"L\n\014ItemWarnTy"
    "pe\022\022\n\016ItemCodeWarnNo\020\000\022\023\n\017ItemCodeWarnLo"
    "g\020\001\022\023\n\017ItemCodeWarnSql\020\002\"@\n\016ItemCodeStat"
    "us\022\027\n\023ItemCodeUnavailable\020\000\022\025\n\021ItemCodeA"
    "vailable\020\001\"H\n\rItemStoreType\022\017\n\013ItemNoSto"
    "re\020\000\022\020\n\014ItemDayStore\020\001\022\024\n\020ItemSecCollSto"
    "re\020\002\"\314\001\n\013MsgCollTask\022\016\n\006taskId\030\001 \001(\005\022\016\n\006"
    "unitId\030\002 \001(\t\022\035\n\007itemIds\030\003 \003(\0132\014.MsgItemC"
    "ode\022\021\n\tstartDate\030\004 \001(\005\022\014\n\004freq\030\005 \001(\005\022\'\n\006"
    "status\030\006 \001(\0162\027.MsgCollTask.TaskStatus\"4\n"
    "\nTaskStatus\022\023\n\017TaskUnavailable\020\000\022\021\n\rTask"
    "Available\020\001\"O\n\013MsgCallData\022\016\n\006unitId\030\001 \001"
    "(\t\022\020\n\010deviceId\030\002 \001(\005\022\016\n\006termId\030\003 \001(\005\022\016\n\006"
    "itemId\030\004 \001(\005\"4\n\020MsgBatchCallData\022\017\n\007unit"
    "Ids\030\001 \003(\t\022\017\n\007itemIds\030\002 \003(\005\"M\n\nMsgControl"
    "\022\020\n\010deviceId\030\001 \001(\005\022\016\n\006termId\030\002 \001(\005\022\016\n\006it"
    "emId\030\003 \001(\005\022\r\n\005value\030\004 \001(\001\"\353\002\n\013MsgFormula"
    "r\022\022\n\nformularId\030\001 \001(\005\022\016\n\006itemId\030\002 \001(\005\022\016\n"
    "\006unitId\030\003 \001(\t\022\014\n\004expr\030\004 \001(\t\022\016\n\006params\030\005 "
    "\003(\t\022\014\n\004mask\030\006 \001(\005\022/\n\010priority\030\007 \001(\0162\035.Ms"
    "gFormular.FormularPriority\022\014\n\004freq\030\010 \001(\005"
    "\022+\n\006status\030\t \001(\0162\033.MsgFormular.FormularS"
    "tatus\"N\n\020FormularPriority\022\n\n\006Level1\020\001\022\n\n"
    "\006Level2\020\002\022\n\n\006Level3\020\003\022\n\n\006Level4\020\004\022\n\n\006Lev"
    "el5\020\005\"@\n\016FormularStatus\022\027\n\023FormularUnava"
    "ilable\020\000\022\025\n\021FormularAvailable\020\001\"\236\001\n\tMsgR"
    "esult\022%\n\006result\030\001 \001(\0162\025.MsgResult.Result"
    "Code\022\027\n\017resultDoubleVal\030\002 \001(\001\"Q\n\nResultC"
    "ode\022\013\n\007Success\020\001\022\017\n\013BadParamErr\020\002\022\024\n\020Dev"
    "iceOfflineErr\020\003\022\017\n\013InternalErr\020\004\"\315\001\n\017Msg"
    "BatchResults\0220\n\006result\030\001 \001(\0162 .MsgBatchR"
    "esults.ResultBatchCode\022\017\n\007unitIds\030\002 \003(\t\022"
    "\017\n\007itemIds\030\003 \003(\005\022\016\n\006values\030\004 \003(\001\"V\n\017Resu"
    "ltBatchCode\022\013\n\007Success\020\001\022\017\n\013BadParamErr\020"
    "\002\022\024\n\020DeviceOfflineErr\020\003\022\017\n\013InternalErr\020\004"
    "2\375\002\n\013UarcService\022,\n\020UarcSendSchedule\022\014.M"
    "sgSchedule\032\n.MsgResult\022\'\n\rUarcSetDevice\022"
    "\n.MsgDevice\032\n.MsgResult\022+\n\017UarcSetCollTa"
    "sk\022\014.MsgCollTask\032\n.MsgResult\022+\n\017UarcSetI"
    "temCode\022\014.MsgItemCode\032\n.MsgResult\022+\n\017Uar"
    "cSetFormular\022\014.MsgFormular\032\n.MsgResult\022("
    "\n\014UarcCallData\022\014.MsgCallData\032\n.MsgResult"
    "\0228\n\021UarcBatchCallData\022\021.MsgBatchCallData"
    "\032\020.MsgBatchResults\022,\n\021UarcDeviceControl\022"
    "\013.MsgControl\032\n.MsgResultB\t\200\001\001\210\001\001\220\001\001", 3155);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "uarc.proto", &protobuf_RegisterTypes);
  MsgScheduleValue::default_instance_ = new MsgScheduleValue();
  MsgSchedule::default_instance_ = new MsgSchedule();
  MsgDevice::default_instance_ = new MsgDevice();
  MsgItemCode::default_instance_ = new MsgItemCode();
  MsgCollTask::default_instance_ = new MsgCollTask();
  MsgCallData::default_instance_ = new MsgCallData();
  MsgBatchCallData::default_instance_ = new MsgBatchCallData();
  MsgControl::default_instance_ = new MsgControl();
  MsgFormular::default_instance_ = new MsgFormular();
  MsgResult::default_instance_ = new MsgResult();
  MsgBatchResults::default_instance_ = new MsgBatchResults();
  MsgScheduleValue::default_instance_->InitAsDefaultInstance();
  MsgSchedule::default_instance_->InitAsDefaultInstance();
  MsgDevice::default_instance_->InitAsDefaultInstance();
  MsgItemCode::default_instance_->InitAsDefaultInstance();
  MsgCollTask::default_instance_->InitAsDefaultInstance();
  MsgCallData::default_instance_->InitAsDefaultInstance();
  MsgBatchCallData::default_instance_->InitAsDefaultInstance();
  MsgControl::default_instance_->InitAsDefaultInstance();
  MsgFormular::default_instance_->InitAsDefaultInstance();
  MsgResult::default_instance_->InitAsDefaultInstance();
  MsgBatchResults::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_uarc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_uarc_2eproto {
  StaticDescriptorInitializer_uarc_2eproto() {
    protobuf_AddDesc_uarc_2eproto();
  }
} static_descriptor_initializer_uarc_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MsgScheduleValue::kDeviceIdFieldNumber;
const int MsgScheduleValue::kTermIdFieldNumber;
const int MsgScheduleValue::kItemIdFieldNumber;
const int MsgScheduleValue::kScheduleTimeFieldNumber;
const int MsgScheduleValue::kScheduleValueFieldNumber;
#endif  // !_MSC_VER

MsgScheduleValue::MsgScheduleValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgScheduleValue::InitAsDefaultInstance() {
}

MsgScheduleValue::MsgScheduleValue(const MsgScheduleValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgScheduleValue::SharedCtor() {
  _cached_size_ = 0;
  deviceid_ = 0;
  termid_ = 0;
  itemid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgScheduleValue::~MsgScheduleValue() {
  SharedDtor();
}

void MsgScheduleValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgScheduleValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgScheduleValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgScheduleValue_descriptor_;
}

const MsgScheduleValue& MsgScheduleValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uarc_2eproto();
  return *default_instance_;
}

MsgScheduleValue* MsgScheduleValue::default_instance_ = NULL;

MsgScheduleValue* MsgScheduleValue::New() const {
  return new MsgScheduleValue;
}

void MsgScheduleValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    deviceid_ = 0;
    termid_ = 0;
    itemid_ = 0;
  }
  scheduletime_.Clear();
  schedulevalue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgScheduleValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 deviceId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_termId;
        break;
      }

      // optional int32 termId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_termId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &termid_)));
          set_has_termid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemId;
        break;
      }

      // optional int32 itemId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scheduleTime;
        break;
      }

      // repeated int32 scheduleTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scheduleTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_scheduletime())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_scheduletime())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_scheduleTime;
        if (input->ExpectTag(41)) goto parse_scheduleValue;
        break;
      }

      // repeated double scheduleValue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_scheduleValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 41, input, this->mutable_schedulevalue())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_schedulevalue())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_scheduleValue;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgScheduleValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 deviceId = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->deviceid(), output);
  }

  // optional int32 termId = 2;
  if (has_termid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->termid(), output);
  }

  // optional int32 itemId = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemid(), output);
  }

  // repeated int32 scheduleTime = 4;
  for (int i = 0; i < this->scheduletime_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->scheduletime(i), output);
  }

  // repeated double scheduleValue = 5;
  for (int i = 0; i < this->schedulevalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      5, this->schedulevalue(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgScheduleValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 deviceId = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->deviceid(), target);
  }

  // optional int32 termId = 2;
  if (has_termid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->termid(), target);
  }

  // optional int32 itemId = 3;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemid(), target);
  }

  // repeated int32 scheduleTime = 4;
  for (int i = 0; i < this->scheduletime_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->scheduletime(i), target);
  }

  // repeated double scheduleValue = 5;
  for (int i = 0; i < this->schedulevalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(5, this->schedulevalue(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgScheduleValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 deviceId = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deviceid());
    }

    // optional int32 termId = 2;
    if (has_termid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->termid());
    }

    // optional int32 itemId = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

  }
  // repeated int32 scheduleTime = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->scheduletime_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->scheduletime(i));
    }
    total_size += 1 * this->scheduletime_size() + data_size;
  }

  // repeated double scheduleValue = 5;
  {
    int data_size = 0;
    data_size = 8 * this->schedulevalue_size();
    total_size += 1 * this->schedulevalue_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgScheduleValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgScheduleValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgScheduleValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgScheduleValue::MergeFrom(const MsgScheduleValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  scheduletime_.MergeFrom(from.scheduletime_);
  schedulevalue_.MergeFrom(from.schedulevalue_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_termid()) {
      set_termid(from.termid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgScheduleValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgScheduleValue::CopyFrom(const MsgScheduleValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgScheduleValue::IsInitialized() const {

  return true;
}

void MsgScheduleValue::Swap(MsgScheduleValue* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(termid_, other->termid_);
    std::swap(itemid_, other->itemid_);
    scheduletime_.Swap(&other->scheduletime_);
    schedulevalue_.Swap(&other->schedulevalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgScheduleValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgScheduleValue_descriptor_;
  metadata.reflection = MsgScheduleValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgSchedule::kScheduleValuesFieldNumber;
const int MsgSchedule::kDateFieldNumber;
const int MsgSchedule::kStartTimeFieldNumber;
const int MsgSchedule::kControlTimeFieldNumber;
#endif  // !_MSC_VER

MsgSchedule::MsgSchedule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgSchedule::InitAsDefaultInstance() {
}

MsgSchedule::MsgSchedule(const MsgSchedule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgSchedule::SharedCtor() {
  _cached_size_ = 0;
  date_ = 0;
  starttime_ = 0;
  controltime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgSchedule::~MsgSchedule() {
  SharedDtor();
}

void MsgSchedule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgSchedule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgSchedule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgSchedule_descriptor_;
}

const MsgSchedule& MsgSchedule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uarc_2eproto();
  return *default_instance_;
}

MsgSchedule* MsgSchedule::default_instance_ = NULL;

MsgSchedule* MsgSchedule::New() const {
  return new MsgSchedule;
}

void MsgSchedule::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    date_ = 0;
    starttime_ = 0;
    controltime_ = 0;
  }
  schedulevalues_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgSchedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgScheduleValue scheduleValues = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scheduleValues:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_schedulevalues()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_scheduleValues;
        if (input->ExpectTag(16)) goto parse_date;
        break;
      }

      // optional int32 date = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_startTime;
        break;
      }

      // optional int32 startTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_controlTime;
        break;
      }

      // optional int32 controlTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_controlTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &controltime_)));
          set_has_controltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgSchedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MsgScheduleValue scheduleValues = 1;
  for (int i = 0; i < this->schedulevalues_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->schedulevalues(i), output);
  }

  // optional int32 date = 2;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->date(), output);
  }

  // optional int32 startTime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->starttime(), output);
  }

  // optional int32 controlTime = 4;
  if (has_controltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->controltime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgSchedule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MsgScheduleValue scheduleValues = 1;
  for (int i = 0; i < this->schedulevalues_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->schedulevalues(i), target);
  }

  // optional int32 date = 2;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->date(), target);
  }

  // optional int32 startTime = 3;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->starttime(), target);
  }

  // optional int32 controlTime = 4;
  if (has_controltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->controltime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgSchedule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 date = 2;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->date());
    }

    // optional int32 startTime = 3;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starttime());
    }

    // optional int32 controlTime = 4;
    if (has_controltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->controltime());
    }

  }
  // repeated .MsgScheduleValue scheduleValues = 1;
  total_size += 1 * this->schedulevalues_size();
  for (int i = 0; i < this->schedulevalues_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->schedulevalues(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgSchedule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgSchedule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgSchedule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgSchedule::MergeFrom(const MsgSchedule& from) {
  GOOGLE_CHECK_NE(&from, this);
  schedulevalues_.MergeFrom(from.schedulevalues_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_controltime()) {
      set_controltime(from.controltime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgSchedule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgSchedule::CopyFrom(const MsgSchedule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSchedule::IsInitialized() const {

  return true;
}

void MsgSchedule::Swap(MsgSchedule* other) {
  if (other != this) {
    schedulevalues_.Swap(&other->schedulevalues_);
    std::swap(date_, other->date_);
    std::swap(starttime_, other->starttime_);
    std::swap(controltime_, other->controltime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgSchedule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgSchedule_descriptor_;
  metadata.reflection = MsgSchedule_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgDevice_DeviceLinkType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDevice_DeviceLinkType_descriptor_;
}
bool MsgDevice_DeviceLinkType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgDevice_DeviceLinkType MsgDevice::linkType_TCPIP;
const MsgDevice_DeviceLinkType MsgDevice::linkType_RS485;
const MsgDevice_DeviceLinkType MsgDevice::linkType_USB;
const MsgDevice_DeviceLinkType MsgDevice::linkType_DBLINK;
const MsgDevice_DeviceLinkType MsgDevice::DeviceLinkType_MIN;
const MsgDevice_DeviceLinkType MsgDevice::DeviceLinkType_MAX;
const int MsgDevice::DeviceLinkType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* MsgDevice_DeviceProtocol_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDevice_DeviceProtocol_descriptor_;
}
bool MsgDevice_DeviceProtocol_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgDevice_DeviceProtocol MsgDevice::Protocol_newEnergyEffi;
const MsgDevice_DeviceProtocol MsgDevice::Protocol_376;
const MsgDevice_DeviceProtocol MsgDevice::Protocol_ModBus;
const MsgDevice_DeviceProtocol MsgDevice::Protocol_104;
const MsgDevice_DeviceProtocol MsgDevice::DeviceProtocol_MIN;
const MsgDevice_DeviceProtocol MsgDevice::DeviceProtocol_MAX;
const int MsgDevice::DeviceProtocol_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* MsgDevice_DeviceStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDevice_DeviceStatus_descriptor_;
}
bool MsgDevice_DeviceStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgDevice_DeviceStatus MsgDevice::DeviceUnavailable;
const MsgDevice_DeviceStatus MsgDevice::DeviceAvailable;
const MsgDevice_DeviceStatus MsgDevice::DeviceStatus_MIN;
const MsgDevice_DeviceStatus MsgDevice::DeviceStatus_MAX;
const int MsgDevice::DeviceStatus_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgDevice::kDeviceIdFieldNumber;
const int MsgDevice::kAddressFieldNumber;
const int MsgDevice::kPortFieldNumber;
const int MsgDevice::kIdentityFieldNumber;
const int MsgDevice::kLinkTypeFieldNumber;
const int MsgDevice::kProtocolFieldNumber;
const int MsgDevice::kHeartBeatFieldNumber;
const int MsgDevice::kStatusFieldNumber;
#endif  // !_MSC_VER

MsgDevice::MsgDevice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgDevice::InitAsDefaultInstance() {
}

MsgDevice::MsgDevice(const MsgDevice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgDevice::SharedCtor() {
  _cached_size_ = 0;
  deviceid_ = 0;
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  identity_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  linktype_ = 0;
  protocol_ = 0;
  heartbeat_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgDevice::~MsgDevice() {
  SharedDtor();
}

void MsgDevice::SharedDtor() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (identity_ != &::google::protobuf::internal::kEmptyString) {
    delete identity_;
  }
  if (this != default_instance_) {
  }
}

void MsgDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgDevice_descriptor_;
}

const MsgDevice& MsgDevice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uarc_2eproto();
  return *default_instance_;
}

MsgDevice* MsgDevice::default_instance_ = NULL;

MsgDevice* MsgDevice::New() const {
  return new MsgDevice;
}

void MsgDevice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    deviceid_ = 0;
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    port_ = 0;
    if (has_identity()) {
      if (identity_ != &::google::protobuf::internal::kEmptyString) {
        identity_->clear();
      }
    }
    linktype_ = 0;
    protocol_ = 0;
    heartbeat_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 deviceId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_address;
        break;
      }

      // optional string address = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // optional int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_identity;
        break;
      }

      // optional string identity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_identity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->identity().data(), this->identity().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_linkType;
        break;
      }

      // optional .MsgDevice.DeviceLinkType linkType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_linkType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgDevice_DeviceLinkType_IsValid(value)) {
            set_linktype(static_cast< ::MsgDevice_DeviceLinkType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_protocol;
        break;
      }

      // optional .MsgDevice.DeviceProtocol protocol = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_protocol:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgDevice_DeviceProtocol_IsValid(value)) {
            set_protocol(static_cast< ::MsgDevice_DeviceProtocol >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_heartBeat;
        break;
      }

      // optional int32 heartBeat = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heartBeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &heartbeat_)));
          set_has_heartbeat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_status;
        break;
      }

      // optional .MsgDevice.DeviceStatus status = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgDevice_DeviceStatus_IsValid(value)) {
            set_status(static_cast< ::MsgDevice_DeviceStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 deviceId = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->deviceid(), output);
  }

  // optional string address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->address(), output);
  }

  // optional int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // optional string identity = 4;
  if (has_identity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->identity().data(), this->identity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->identity(), output);
  }

  // optional .MsgDevice.DeviceLinkType linkType = 5;
  if (has_linktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->linktype(), output);
  }

  // optional .MsgDevice.DeviceProtocol protocol = 6;
  if (has_protocol()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->protocol(), output);
  }

  // optional int32 heartBeat = 7;
  if (has_heartbeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->heartbeat(), output);
  }

  // optional .MsgDevice.DeviceStatus status = 8;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgDevice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 deviceId = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->deviceid(), target);
  }

  // optional string address = 2;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->address(), target);
  }

  // optional int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // optional string identity = 4;
  if (has_identity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->identity().data(), this->identity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->identity(), target);
  }

  // optional .MsgDevice.DeviceLinkType linkType = 5;
  if (has_linktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->linktype(), target);
  }

  // optional .MsgDevice.DeviceProtocol protocol = 6;
  if (has_protocol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->protocol(), target);
  }

  // optional int32 heartBeat = 7;
  if (has_heartbeat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->heartbeat(), target);
  }

  // optional .MsgDevice.DeviceStatus status = 8;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgDevice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 deviceId = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deviceid());
    }

    // optional string address = 2;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional string identity = 4;
    if (has_identity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->identity());
    }

    // optional .MsgDevice.DeviceLinkType linkType = 5;
    if (has_linktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->linktype());
    }

    // optional .MsgDevice.DeviceProtocol protocol = 6;
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol());
    }

    // optional int32 heartBeat = 7;
    if (has_heartbeat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->heartbeat());
    }

    // optional .MsgDevice.DeviceStatus status = 8;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgDevice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgDevice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgDevice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgDevice::MergeFrom(const MsgDevice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_identity()) {
      set_identity(from.identity());
    }
    if (from.has_linktype()) {
      set_linktype(from.linktype());
    }
    if (from.has_protocol()) {
      set_protocol(from.protocol());
    }
    if (from.has_heartbeat()) {
      set_heartbeat(from.heartbeat());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgDevice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgDevice::CopyFrom(const MsgDevice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgDevice::IsInitialized() const {

  return true;
}

void MsgDevice::Swap(MsgDevice* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(address_, other->address_);
    std::swap(port_, other->port_);
    std::swap(identity_, other->identity_);
    std::swap(linktype_, other->linktype_);
    std::swap(protocol_, other->protocol_);
    std::swap(heartbeat_, other->heartbeat_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgDevice_descriptor_;
  metadata.reflection = MsgDevice_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgItemCode_ItemCodeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgItemCode_ItemCodeType_descriptor_;
}
bool MsgItemCode_ItemCodeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgItemCode_ItemCodeType MsgItemCode::ItemCodeAnalogVal;
const MsgItemCode_ItemCodeType MsgItemCode::ItemCodeDigitalVal;
const MsgItemCode_ItemCodeType MsgItemCode::ItemCodeDisplayVal;
const MsgItemCode_ItemCodeType MsgItemCode::ItemCodeType_MIN;
const MsgItemCode_ItemCodeType MsgItemCode::ItemCodeType_MAX;
const int MsgItemCode::ItemCodeType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* MsgItemCode_ItemSrcType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgItemCode_ItemSrcType_descriptor_;
}
bool MsgItemCode_ItemSrcType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgItemCode_ItemSrcType MsgItemCode::DeviceCollect;
const MsgItemCode_ItemSrcType MsgItemCode::CalculateResult;
const MsgItemCode_ItemSrcType MsgItemCode::ItemSrcType_MIN;
const MsgItemCode_ItemSrcType MsgItemCode::ItemSrcType_MAX;
const int MsgItemCode::ItemSrcType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* MsgItemCode_ItemWarnType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgItemCode_ItemWarnType_descriptor_;
}
bool MsgItemCode_ItemWarnType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgItemCode_ItemWarnType MsgItemCode::ItemCodeWarnNo;
const MsgItemCode_ItemWarnType MsgItemCode::ItemCodeWarnLog;
const MsgItemCode_ItemWarnType MsgItemCode::ItemCodeWarnSql;
const MsgItemCode_ItemWarnType MsgItemCode::ItemWarnType_MIN;
const MsgItemCode_ItemWarnType MsgItemCode::ItemWarnType_MAX;
const int MsgItemCode::ItemWarnType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* MsgItemCode_ItemCodeStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgItemCode_ItemCodeStatus_descriptor_;
}
bool MsgItemCode_ItemCodeStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgItemCode_ItemCodeStatus MsgItemCode::ItemCodeUnavailable;
const MsgItemCode_ItemCodeStatus MsgItemCode::ItemCodeAvailable;
const MsgItemCode_ItemCodeStatus MsgItemCode::ItemCodeStatus_MIN;
const MsgItemCode_ItemCodeStatus MsgItemCode::ItemCodeStatus_MAX;
const int MsgItemCode::ItemCodeStatus_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* MsgItemCode_ItemStoreType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgItemCode_ItemStoreType_descriptor_;
}
bool MsgItemCode_ItemStoreType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgItemCode_ItemStoreType MsgItemCode::ItemNoStore;
const MsgItemCode_ItemStoreType MsgItemCode::ItemDayStore;
const MsgItemCode_ItemStoreType MsgItemCode::ItemSecCollStore;
const MsgItemCode_ItemStoreType MsgItemCode::ItemStoreType_MIN;
const MsgItemCode_ItemStoreType MsgItemCode::ItemStoreType_MAX;
const int MsgItemCode::ItemStoreType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgItemCode::kItemIdFieldNumber;
const int MsgItemCode::kUnitIdFieldNumber;
const int MsgItemCode::kDeviceIdFieldNumber;
const int MsgItemCode::kItemTypeFieldNumber;
const int MsgItemCode::kSrcTypeFieldNumber;
const int MsgItemCode::kUpLimitFieldNumber;
const int MsgItemCode::kDownLimitFieldNumber;
const int MsgItemCode::kWarnTypeFieldNumber;
const int MsgItemCode::kBasevalFieldNumber;
const int MsgItemCode::kCoefficientFieldNumber;
const int MsgItemCode::kDayStoreTimeFieldNumber;
const int MsgItemCode::kDayStoreSqlFieldNumber;
const int MsgItemCode::kStatusFieldNumber;
const int MsgItemCode::kTermIdFieldNumber;
const int MsgItemCode::kWarnStoreSqlFieldNumber;
const int MsgItemCode::kSecCollPeriodFieldNumber;
const int MsgItemCode::kSecCollSQLFieldNumber;
const int MsgItemCode::kSecCollOtherSQLFieldNumber;
const int MsgItemCode::kStoreTypeFieldNumber;
#endif  // !_MSC_VER

MsgItemCode::MsgItemCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgItemCode::InitAsDefaultInstance() {
}

MsgItemCode::MsgItemCode(const MsgItemCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgItemCode::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  unitid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceid_ = 0;
  itemtype_ = 0;
  srctype_ = 0;
  uplimit_ = 0;
  downlimit_ = 0;
  warntype_ = 0;
  baseval_ = 0;
  coefficient_ = 0;
  daystoretime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  daystoresql_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0;
  termid_ = 0;
  warnstoresql_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seccollperiod_ = 0;
  seccollsql_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seccollothersql_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  storetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgItemCode::~MsgItemCode() {
  SharedDtor();
}

void MsgItemCode::SharedDtor() {
  if (unitid_ != &::google::protobuf::internal::kEmptyString) {
    delete unitid_;
  }
  if (daystoretime_ != &::google::protobuf::internal::kEmptyString) {
    delete daystoretime_;
  }
  if (daystoresql_ != &::google::protobuf::internal::kEmptyString) {
    delete daystoresql_;
  }
  if (warnstoresql_ != &::google::protobuf::internal::kEmptyString) {
    delete warnstoresql_;
  }
  if (seccollsql_ != &::google::protobuf::internal::kEmptyString) {
    delete seccollsql_;
  }
  if (seccollothersql_ != &::google::protobuf::internal::kEmptyString) {
    delete seccollothersql_;
  }
  if (this != default_instance_) {
  }
}

void MsgItemCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgItemCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgItemCode_descriptor_;
}

const MsgItemCode& MsgItemCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uarc_2eproto();
  return *default_instance_;
}

MsgItemCode* MsgItemCode::default_instance_ = NULL;

MsgItemCode* MsgItemCode::New() const {
  return new MsgItemCode;
}

void MsgItemCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    if (has_unitid()) {
      if (unitid_ != &::google::protobuf::internal::kEmptyString) {
        unitid_->clear();
      }
    }
    deviceid_ = 0;
    itemtype_ = 0;
    srctype_ = 0;
    uplimit_ = 0;
    downlimit_ = 0;
    warntype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    baseval_ = 0;
    coefficient_ = 0;
    if (has_daystoretime()) {
      if (daystoretime_ != &::google::protobuf::internal::kEmptyString) {
        daystoretime_->clear();
      }
    }
    if (has_daystoresql()) {
      if (daystoresql_ != &::google::protobuf::internal::kEmptyString) {
        daystoresql_->clear();
      }
    }
    status_ = 0;
    termid_ = 0;
    if (has_warnstoresql()) {
      if (warnstoresql_ != &::google::protobuf::internal::kEmptyString) {
        warnstoresql_->clear();
      }
    }
    seccollperiod_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_seccollsql()) {
      if (seccollsql_ != &::google::protobuf::internal::kEmptyString) {
        seccollsql_->clear();
      }
    }
    if (has_seccollothersql()) {
      if (seccollothersql_ != &::google::protobuf::internal::kEmptyString) {
        seccollothersql_->clear();
      }
    }
    storetype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgItemCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_unitId;
        break;
      }

      // optional string unitId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unitid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unitid().data(), this->unitid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_deviceId;
        break;
      }

      // optional int32 deviceId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_itemType;
        break;
      }

      // optional .MsgItemCode.ItemCodeType itemType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgItemCode_ItemCodeType_IsValid(value)) {
            set_itemtype(static_cast< ::MsgItemCode_ItemCodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_srcType;
        break;
      }

      // optional .MsgItemCode.ItemSrcType srcType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_srcType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgItemCode_ItemSrcType_IsValid(value)) {
            set_srctype(static_cast< ::MsgItemCode_ItemSrcType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_upLimit;
        break;
      }

      // optional double upLimit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_upLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &uplimit_)));
          set_has_uplimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_downLimit;
        break;
      }

      // optional double downLimit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_downLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &downlimit_)));
          set_has_downlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_warnType;
        break;
      }

      // optional .MsgItemCode.ItemWarnType warnType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_warnType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgItemCode_ItemWarnType_IsValid(value)) {
            set_warntype(static_cast< ::MsgItemCode_ItemWarnType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_baseval;
        break;
      }

      // optional double baseval = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_baseval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &baseval_)));
          set_has_baseval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_coefficient;
        break;
      }

      // optional double coefficient = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_coefficient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &coefficient_)));
          set_has_coefficient();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_dayStoreTime;
        break;
      }

      // optional string dayStoreTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dayStoreTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_daystoretime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->daystoretime().data(), this->daystoretime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_dayStoreSql;
        break;
      }

      // optional string dayStoreSql = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dayStoreSql:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_daystoresql()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->daystoresql().data(), this->daystoresql().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_status;
        break;
      }

      // optional .MsgItemCode.ItemCodeStatus status = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgItemCode_ItemCodeStatus_IsValid(value)) {
            set_status(static_cast< ::MsgItemCode_ItemCodeStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_termId;
        break;
      }

      // optional int32 termId = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_termId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &termid_)));
          set_has_termid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_warnStoreSql;
        break;
      }

      // optional string warnStoreSql = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_warnStoreSql:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_warnstoresql()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->warnstoresql().data(), this->warnstoresql().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_secCollPeriod;
        break;
      }

      // optional int32 secCollPeriod = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_secCollPeriod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seccollperiod_)));
          set_has_seccollperiod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_secCollSQL;
        break;
      }

      // optional string secCollSQL = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_secCollSQL:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seccollsql()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seccollsql().data(), this->seccollsql().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_secCollOtherSQL;
        break;
      }

      // optional string secCollOtherSQL = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_secCollOtherSQL:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seccollothersql()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seccollothersql().data(), this->seccollothersql().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_storeType;
        break;
      }

      // optional .MsgItemCode.ItemStoreType storeType = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_storeType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgItemCode_ItemStoreType_IsValid(value)) {
            set_storetype(static_cast< ::MsgItemCode_ItemStoreType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(19, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgItemCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional string unitId = 2;
  if (has_unitid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unitid().data(), this->unitid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->unitid(), output);
  }

  // optional int32 deviceId = 3;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->deviceid(), output);
  }

  // optional .MsgItemCode.ItemCodeType itemType = 4;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->itemtype(), output);
  }

  // optional .MsgItemCode.ItemSrcType srcType = 5;
  if (has_srctype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->srctype(), output);
  }

  // optional double upLimit = 6;
  if (has_uplimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->uplimit(), output);
  }

  // optional double downLimit = 7;
  if (has_downlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->downlimit(), output);
  }

  // optional .MsgItemCode.ItemWarnType warnType = 8;
  if (has_warntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->warntype(), output);
  }

  // optional double baseval = 9;
  if (has_baseval()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->baseval(), output);
  }

  // optional double coefficient = 10;
  if (has_coefficient()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->coefficient(), output);
  }

  // optional string dayStoreTime = 11;
  if (has_daystoretime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->daystoretime().data(), this->daystoretime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->daystoretime(), output);
  }

  // optional string dayStoreSql = 12;
  if (has_daystoresql()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->daystoresql().data(), this->daystoresql().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->daystoresql(), output);
  }

  // optional .MsgItemCode.ItemCodeStatus status = 13;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->status(), output);
  }

  // optional int32 termId = 14;
  if (has_termid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->termid(), output);
  }

  // optional string warnStoreSql = 15;
  if (has_warnstoresql()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->warnstoresql().data(), this->warnstoresql().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->warnstoresql(), output);
  }

  // optional int32 secCollPeriod = 16;
  if (has_seccollperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->seccollperiod(), output);
  }

  // optional string secCollSQL = 17;
  if (has_seccollsql()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seccollsql().data(), this->seccollsql().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->seccollsql(), output);
  }

  // optional string secCollOtherSQL = 18;
  if (has_seccollothersql()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seccollothersql().data(), this->seccollothersql().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->seccollothersql(), output);
  }

  // optional .MsgItemCode.ItemStoreType storeType = 19;
  if (has_storetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->storetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgItemCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional string unitId = 2;
  if (has_unitid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unitid().data(), this->unitid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->unitid(), target);
  }

  // optional int32 deviceId = 3;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->deviceid(), target);
  }

  // optional .MsgItemCode.ItemCodeType itemType = 4;
  if (has_itemtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->itemtype(), target);
  }

  // optional .MsgItemCode.ItemSrcType srcType = 5;
  if (has_srctype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->srctype(), target);
  }

  // optional double upLimit = 6;
  if (has_uplimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->uplimit(), target);
  }

  // optional double downLimit = 7;
  if (has_downlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->downlimit(), target);
  }

  // optional .MsgItemCode.ItemWarnType warnType = 8;
  if (has_warntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->warntype(), target);
  }

  // optional double baseval = 9;
  if (has_baseval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->baseval(), target);
  }

  // optional double coefficient = 10;
  if (has_coefficient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->coefficient(), target);
  }

  // optional string dayStoreTime = 11;
  if (has_daystoretime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->daystoretime().data(), this->daystoretime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->daystoretime(), target);
  }

  // optional string dayStoreSql = 12;
  if (has_daystoresql()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->daystoresql().data(), this->daystoresql().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->daystoresql(), target);
  }

  // optional .MsgItemCode.ItemCodeStatus status = 13;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->status(), target);
  }

  // optional int32 termId = 14;
  if (has_termid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->termid(), target);
  }

  // optional string warnStoreSql = 15;
  if (has_warnstoresql()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->warnstoresql().data(), this->warnstoresql().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->warnstoresql(), target);
  }

  // optional int32 secCollPeriod = 16;
  if (has_seccollperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->seccollperiod(), target);
  }

  // optional string secCollSQL = 17;
  if (has_seccollsql()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seccollsql().data(), this->seccollsql().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->seccollsql(), target);
  }

  // optional string secCollOtherSQL = 18;
  if (has_seccollothersql()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seccollothersql().data(), this->seccollothersql().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->seccollothersql(), target);
  }

  // optional .MsgItemCode.ItemStoreType storeType = 19;
  if (has_storetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->storetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgItemCode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional string unitId = 2;
    if (has_unitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unitid());
    }

    // optional int32 deviceId = 3;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deviceid());
    }

    // optional .MsgItemCode.ItemCodeType itemType = 4;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->itemtype());
    }

    // optional .MsgItemCode.ItemSrcType srcType = 5;
    if (has_srctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->srctype());
    }

    // optional double upLimit = 6;
    if (has_uplimit()) {
      total_size += 1 + 8;
    }

    // optional double downLimit = 7;
    if (has_downlimit()) {
      total_size += 1 + 8;
    }

    // optional .MsgItemCode.ItemWarnType warnType = 8;
    if (has_warntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->warntype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double baseval = 9;
    if (has_baseval()) {
      total_size += 1 + 8;
    }

    // optional double coefficient = 10;
    if (has_coefficient()) {
      total_size += 1 + 8;
    }

    // optional string dayStoreTime = 11;
    if (has_daystoretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->daystoretime());
    }

    // optional string dayStoreSql = 12;
    if (has_daystoresql()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->daystoresql());
    }

    // optional .MsgItemCode.ItemCodeStatus status = 13;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional int32 termId = 14;
    if (has_termid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->termid());
    }

    // optional string warnStoreSql = 15;
    if (has_warnstoresql()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->warnstoresql());
    }

    // optional int32 secCollPeriod = 16;
    if (has_seccollperiod()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seccollperiod());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string secCollSQL = 17;
    if (has_seccollsql()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seccollsql());
    }

    // optional string secCollOtherSQL = 18;
    if (has_seccollothersql()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seccollothersql());
    }

    // optional .MsgItemCode.ItemStoreType storeType = 19;
    if (has_storetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->storetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgItemCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgItemCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgItemCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgItemCode::MergeFrom(const MsgItemCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_unitid()) {
      set_unitid(from.unitid());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
    if (from.has_srctype()) {
      set_srctype(from.srctype());
    }
    if (from.has_uplimit()) {
      set_uplimit(from.uplimit());
    }
    if (from.has_downlimit()) {
      set_downlimit(from.downlimit());
    }
    if (from.has_warntype()) {
      set_warntype(from.warntype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_baseval()) {
      set_baseval(from.baseval());
    }
    if (from.has_coefficient()) {
      set_coefficient(from.coefficient());
    }
    if (from.has_daystoretime()) {
      set_daystoretime(from.daystoretime());
    }
    if (from.has_daystoresql()) {
      set_daystoresql(from.daystoresql());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_termid()) {
      set_termid(from.termid());
    }
    if (from.has_warnstoresql()) {
      set_warnstoresql(from.warnstoresql());
    }
    if (from.has_seccollperiod()) {
      set_seccollperiod(from.seccollperiod());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_seccollsql()) {
      set_seccollsql(from.seccollsql());
    }
    if (from.has_seccollothersql()) {
      set_seccollothersql(from.seccollothersql());
    }
    if (from.has_storetype()) {
      set_storetype(from.storetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgItemCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgItemCode::CopyFrom(const MsgItemCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgItemCode::IsInitialized() const {

  return true;
}

void MsgItemCode::Swap(MsgItemCode* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(unitid_, other->unitid_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(itemtype_, other->itemtype_);
    std::swap(srctype_, other->srctype_);
    std::swap(uplimit_, other->uplimit_);
    std::swap(downlimit_, other->downlimit_);
    std::swap(warntype_, other->warntype_);
    std::swap(baseval_, other->baseval_);
    std::swap(coefficient_, other->coefficient_);
    std::swap(daystoretime_, other->daystoretime_);
    std::swap(daystoresql_, other->daystoresql_);
    std::swap(status_, other->status_);
    std::swap(termid_, other->termid_);
    std::swap(warnstoresql_, other->warnstoresql_);
    std::swap(seccollperiod_, other->seccollperiod_);
    std::swap(seccollsql_, other->seccollsql_);
    std::swap(seccollothersql_, other->seccollothersql_);
    std::swap(storetype_, other->storetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgItemCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgItemCode_descriptor_;
  metadata.reflection = MsgItemCode_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgCollTask_TaskStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCollTask_TaskStatus_descriptor_;
}
bool MsgCollTask_TaskStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgCollTask_TaskStatus MsgCollTask::TaskUnavailable;
const MsgCollTask_TaskStatus MsgCollTask::TaskAvailable;
const MsgCollTask_TaskStatus MsgCollTask::TaskStatus_MIN;
const MsgCollTask_TaskStatus MsgCollTask::TaskStatus_MAX;
const int MsgCollTask::TaskStatus_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgCollTask::kTaskIdFieldNumber;
const int MsgCollTask::kUnitIdFieldNumber;
const int MsgCollTask::kItemIdsFieldNumber;
const int MsgCollTask::kStartDateFieldNumber;
const int MsgCollTask::kFreqFieldNumber;
const int MsgCollTask::kStatusFieldNumber;
#endif  // !_MSC_VER

MsgCollTask::MsgCollTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgCollTask::InitAsDefaultInstance() {
}

MsgCollTask::MsgCollTask(const MsgCollTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgCollTask::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0;
  unitid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  startdate_ = 0;
  freq_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCollTask::~MsgCollTask() {
  SharedDtor();
}

void MsgCollTask::SharedDtor() {
  if (unitid_ != &::google::protobuf::internal::kEmptyString) {
    delete unitid_;
  }
  if (this != default_instance_) {
  }
}

void MsgCollTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCollTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCollTask_descriptor_;
}

const MsgCollTask& MsgCollTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uarc_2eproto();
  return *default_instance_;
}

MsgCollTask* MsgCollTask::default_instance_ = NULL;

MsgCollTask* MsgCollTask::New() const {
  return new MsgCollTask;
}

void MsgCollTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0;
    if (has_unitid()) {
      if (unitid_ != &::google::protobuf::internal::kEmptyString) {
        unitid_->clear();
      }
    }
    startdate_ = 0;
    freq_ = 0;
    status_ = 0;
  }
  itemids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCollTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 taskId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_unitId;
        break;
      }

      // optional string unitId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unitid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unitid().data(), this->unitid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_itemIds;
        break;
      }

      // repeated .MsgItemCode itemIds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_itemIds;
        if (input->ExpectTag(32)) goto parse_startDate;
        break;
      }

      // optional int32 startDate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startDate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startdate_)));
          set_has_startdate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_freq;
        break;
      }

      // optional int32 freq = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freq_)));
          set_has_freq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_status;
        break;
      }

      // optional .MsgCollTask.TaskStatus status = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgCollTask_TaskStatus_IsValid(value)) {
            set_status(static_cast< ::MsgCollTask_TaskStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCollTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 taskId = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->taskid(), output);
  }

  // optional string unitId = 2;
  if (has_unitid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unitid().data(), this->unitid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->unitid(), output);
  }

  // repeated .MsgItemCode itemIds = 3;
  for (int i = 0; i < this->itemids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->itemids(i), output);
  }

  // optional int32 startDate = 4;
  if (has_startdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->startdate(), output);
  }

  // optional int32 freq = 5;
  if (has_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->freq(), output);
  }

  // optional .MsgCollTask.TaskStatus status = 6;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCollTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 taskId = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->taskid(), target);
  }

  // optional string unitId = 2;
  if (has_unitid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unitid().data(), this->unitid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->unitid(), target);
  }

  // repeated .MsgItemCode itemIds = 3;
  for (int i = 0; i < this->itemids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->itemids(i), target);
  }

  // optional int32 startDate = 4;
  if (has_startdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->startdate(), target);
  }

  // optional int32 freq = 5;
  if (has_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->freq(), target);
  }

  // optional .MsgCollTask.TaskStatus status = 6;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCollTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 taskId = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->taskid());
    }

    // optional string unitId = 2;
    if (has_unitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unitid());
    }

    // optional int32 startDate = 4;
    if (has_startdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startdate());
    }

    // optional int32 freq = 5;
    if (has_freq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freq());
    }

    // optional .MsgCollTask.TaskStatus status = 6;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated .MsgItemCode itemIds = 3;
  total_size += 1 * this->itemids_size();
  for (int i = 0; i < this->itemids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCollTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCollTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCollTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCollTask::MergeFrom(const MsgCollTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemids_.MergeFrom(from.itemids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_unitid()) {
      set_unitid(from.unitid());
    }
    if (from.has_startdate()) {
      set_startdate(from.startdate());
    }
    if (from.has_freq()) {
      set_freq(from.freq());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCollTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCollTask::CopyFrom(const MsgCollTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCollTask::IsInitialized() const {

  return true;
}

void MsgCollTask::Swap(MsgCollTask* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(unitid_, other->unitid_);
    itemids_.Swap(&other->itemids_);
    std::swap(startdate_, other->startdate_);
    std::swap(freq_, other->freq_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCollTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCollTask_descriptor_;
  metadata.reflection = MsgCollTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgCallData::kUnitIdFieldNumber;
const int MsgCallData::kDeviceIdFieldNumber;
const int MsgCallData::kTermIdFieldNumber;
const int MsgCallData::kItemIdFieldNumber;
#endif  // !_MSC_VER

MsgCallData::MsgCallData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgCallData::InitAsDefaultInstance() {
}

MsgCallData::MsgCallData(const MsgCallData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgCallData::SharedCtor() {
  _cached_size_ = 0;
  unitid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceid_ = 0;
  termid_ = 0;
  itemid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgCallData::~MsgCallData() {
  SharedDtor();
}

void MsgCallData::SharedDtor() {
  if (unitid_ != &::google::protobuf::internal::kEmptyString) {
    delete unitid_;
  }
  if (this != default_instance_) {
  }
}

void MsgCallData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgCallData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgCallData_descriptor_;
}

const MsgCallData& MsgCallData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uarc_2eproto();
  return *default_instance_;
}

MsgCallData* MsgCallData::default_instance_ = NULL;

MsgCallData* MsgCallData::New() const {
  return new MsgCallData;
}

void MsgCallData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_unitid()) {
      if (unitid_ != &::google::protobuf::internal::kEmptyString) {
        unitid_->clear();
      }
    }
    deviceid_ = 0;
    termid_ = 0;
    itemid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgCallData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string unitId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unitid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unitid().data(), this->unitid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_deviceId;
        break;
      }

      // optional int32 deviceId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deviceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_termId;
        break;
      }

      // optional int32 termId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_termId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &termid_)));
          set_has_termid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_itemId;
        break;
      }

      // optional int32 itemId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgCallData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string unitId = 1;
  if (has_unitid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unitid().data(), this->unitid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->unitid(), output);
  }

  // optional int32 deviceId = 2;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->deviceid(), output);
  }

  // optional int32 termId = 3;
  if (has_termid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->termid(), output);
  }

  // optional int32 itemId = 4;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgCallData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string unitId = 1;
  if (has_unitid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unitid().data(), this->unitid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->unitid(), target);
  }

  // optional int32 deviceId = 2;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->deviceid(), target);
  }

  // optional int32 termId = 3;
  if (has_termid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->termid(), target);
  }

  // optional int32 itemId = 4;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgCallData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string unitId = 1;
    if (has_unitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unitid());
    }

    // optional int32 deviceId = 2;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deviceid());
    }

    // optional int32 termId = 3;
    if (has_termid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->termid());
    }

    // optional int32 itemId = 4;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgCallData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgCallData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgCallData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgCallData::MergeFrom(const MsgCallData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unitid()) {
      set_unitid(from.unitid());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_termid()) {
      set_termid(from.termid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgCallData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgCallData::CopyFrom(const MsgCallData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCallData::IsInitialized() const {

  return true;
}

void MsgCallData::Swap(MsgCallData* other) {
  if (other != this) {
    std::swap(unitid_, other->unitid_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(termid_, other->termid_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgCallData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgCallData_descriptor_;
  metadata.reflection = MsgCallData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgBatchCallData::kUnitIdsFieldNumber;
const int MsgBatchCallData::kItemIdsFieldNumber;
#endif  // !_MSC_VER

MsgBatchCallData::MsgBatchCallData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgBatchCallData::InitAsDefaultInstance() {
}

MsgBatchCallData::MsgBatchCallData(const MsgBatchCallData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgBatchCallData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgBatchCallData::~MsgBatchCallData() {
  SharedDtor();
}

void MsgBatchCallData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgBatchCallData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgBatchCallData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgBatchCallData_descriptor_;
}

const MsgBatchCallData& MsgBatchCallData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uarc_2eproto();
  return *default_instance_;
}

MsgBatchCallData* MsgBatchCallData::default_instance_ = NULL;

MsgBatchCallData* MsgBatchCallData::New() const {
  return new MsgBatchCallData;
}

void MsgBatchCallData::Clear() {
  unitids_.Clear();
  itemids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgBatchCallData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string unitIds = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_unitids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unitids(this->unitids_size() - 1).data(),
            this->unitids(this->unitids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_unitIds;
        if (input->ExpectTag(16)) goto parse_itemIds;
        break;
      }

      // repeated int32 itemIds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_itemids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_itemids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgBatchCallData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string unitIds = 1;
  for (int i = 0; i < this->unitids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->unitids(i).data(), this->unitids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->unitids(i), output);
  }

  // repeated int32 itemIds = 2;
  for (int i = 0; i < this->itemids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->itemids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgBatchCallData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string unitIds = 1;
  for (int i = 0; i < this->unitids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unitids(i).data(), this->unitids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->unitids(i), target);
  }

  // repeated int32 itemIds = 2;
  for (int i = 0; i < this->itemids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->itemids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgBatchCallData::ByteSize() const {
  int total_size = 0;

  // repeated string unitIds = 1;
  total_size += 1 * this->unitids_size();
  for (int i = 0; i < this->unitids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->unitids(i));
  }

  // repeated int32 itemIds = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->itemids(i));
    }
    total_size += 1 * this->itemids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgBatchCallData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgBatchCallData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgBatchCallData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgBatchCallData::MergeFrom(const MsgBatchCallData& from) {
  GOOGLE_CHECK_NE(&from, this);
  unitids_.MergeFrom(from.unitids_);
  itemids_.MergeFrom(from.itemids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgBatchCallData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBatchCallData::CopyFrom(const MsgBatchCallData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBatchCallData::IsInitialized() const {

  return true;
}

void MsgBatchCallData::Swap(MsgBatchCallData* other) {
  if (other != this) {
    unitids_.Swap(&other->unitids_);
    itemids_.Swap(&other->itemids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgBatchCallData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgBatchCallData_descriptor_;
  metadata.reflection = MsgBatchCallData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgControl::kDeviceIdFieldNumber;
const int MsgControl::kTermIdFieldNumber;
const int MsgControl::kItemIdFieldNumber;
const int MsgControl::kValueFieldNumber;
#endif  // !_MSC_VER

MsgControl::MsgControl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgControl::InitAsDefaultInstance() {
}

MsgControl::MsgControl(const MsgControl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgControl::SharedCtor() {
  _cached_size_ = 0;
  deviceid_ = 0;
  termid_ = 0;
  itemid_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgControl::~MsgControl() {
  SharedDtor();
}

void MsgControl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgControl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgControl_descriptor_;
}

const MsgControl& MsgControl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uarc_2eproto();
  return *default_instance_;
}

MsgControl* MsgControl::default_instance_ = NULL;

MsgControl* MsgControl::New() const {
  return new MsgControl;
}

void MsgControl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    deviceid_ = 0;
    termid_ = 0;
    itemid_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 deviceId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deviceid_)));
          set_has_deviceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_termId;
        break;
      }

      // optional int32 termId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_termId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &termid_)));
          set_has_termid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemId;
        break;
      }

      // optional int32 itemId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_value;
        break;
      }

      // optional double value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 deviceId = 1;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->deviceid(), output);
  }

  // optional int32 termId = 2;
  if (has_termid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->termid(), output);
  }

  // optional int32 itemId = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemid(), output);
  }

  // optional double value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgControl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 deviceId = 1;
  if (has_deviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->deviceid(), target);
  }

  // optional int32 termId = 2;
  if (has_termid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->termid(), target);
  }

  // optional int32 itemId = 3;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemid(), target);
  }

  // optional double value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgControl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 deviceId = 1;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deviceid());
    }

    // optional int32 termId = 2;
    if (has_termid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->termid());
    }

    // optional int32 itemId = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional double value = 4;
    if (has_value()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgControl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgControl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgControl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgControl::MergeFrom(const MsgControl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_termid()) {
      set_termid(from.termid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgControl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgControl::CopyFrom(const MsgControl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgControl::IsInitialized() const {

  return true;
}

void MsgControl::Swap(MsgControl* other) {
  if (other != this) {
    std::swap(deviceid_, other->deviceid_);
    std::swap(termid_, other->termid_);
    std::swap(itemid_, other->itemid_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgControl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgControl_descriptor_;
  metadata.reflection = MsgControl_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgFormular_FormularPriority_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgFormular_FormularPriority_descriptor_;
}
bool MsgFormular_FormularPriority_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgFormular_FormularPriority MsgFormular::Level1;
const MsgFormular_FormularPriority MsgFormular::Level2;
const MsgFormular_FormularPriority MsgFormular::Level3;
const MsgFormular_FormularPriority MsgFormular::Level4;
const MsgFormular_FormularPriority MsgFormular::Level5;
const MsgFormular_FormularPriority MsgFormular::FormularPriority_MIN;
const MsgFormular_FormularPriority MsgFormular::FormularPriority_MAX;
const int MsgFormular::FormularPriority_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* MsgFormular_FormularStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgFormular_FormularStatus_descriptor_;
}
bool MsgFormular_FormularStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgFormular_FormularStatus MsgFormular::FormularUnavailable;
const MsgFormular_FormularStatus MsgFormular::FormularAvailable;
const MsgFormular_FormularStatus MsgFormular::FormularStatus_MIN;
const MsgFormular_FormularStatus MsgFormular::FormularStatus_MAX;
const int MsgFormular::FormularStatus_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgFormular::kFormularIdFieldNumber;
const int MsgFormular::kItemIdFieldNumber;
const int MsgFormular::kUnitIdFieldNumber;
const int MsgFormular::kExprFieldNumber;
const int MsgFormular::kParamsFieldNumber;
const int MsgFormular::kMaskFieldNumber;
const int MsgFormular::kPriorityFieldNumber;
const int MsgFormular::kFreqFieldNumber;
const int MsgFormular::kStatusFieldNumber;
#endif  // !_MSC_VER

MsgFormular::MsgFormular()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgFormular::InitAsDefaultInstance() {
}

MsgFormular::MsgFormular(const MsgFormular& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgFormular::SharedCtor() {
  _cached_size_ = 0;
  formularid_ = 0;
  itemid_ = 0;
  unitid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  expr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mask_ = 0;
  priority_ = 1;
  freq_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgFormular::~MsgFormular() {
  SharedDtor();
}

void MsgFormular::SharedDtor() {
  if (unitid_ != &::google::protobuf::internal::kEmptyString) {
    delete unitid_;
  }
  if (expr_ != &::google::protobuf::internal::kEmptyString) {
    delete expr_;
  }
  if (this != default_instance_) {
  }
}

void MsgFormular::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgFormular::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgFormular_descriptor_;
}

const MsgFormular& MsgFormular::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uarc_2eproto();
  return *default_instance_;
}

MsgFormular* MsgFormular::default_instance_ = NULL;

MsgFormular* MsgFormular::New() const {
  return new MsgFormular;
}

void MsgFormular::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    formularid_ = 0;
    itemid_ = 0;
    if (has_unitid()) {
      if (unitid_ != &::google::protobuf::internal::kEmptyString) {
        unitid_->clear();
      }
    }
    if (has_expr()) {
      if (expr_ != &::google::protobuf::internal::kEmptyString) {
        expr_->clear();
      }
    }
    mask_ = 0;
    priority_ = 1;
    freq_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    status_ = 0;
  }
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgFormular::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 formularId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &formularid_)));
          set_has_formularid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional int32 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_unitId;
        break;
      }

      // optional string unitId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unitid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unitid().data(), this->unitid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_expr;
        break;
      }

      // optional string expr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_expr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_expr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->expr().data(), this->expr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_params;
        break;
      }

      // repeated string params = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_params()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->params(this->params_size() - 1).data(),
            this->params(this->params_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_params;
        if (input->ExpectTag(48)) goto parse_mask;
        break;
      }

      // optional int32 mask = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mask_)));
          set_has_mask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_priority;
        break;
      }

      // optional .MsgFormular.FormularPriority priority = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priority:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgFormular_FormularPriority_IsValid(value)) {
            set_priority(static_cast< ::MsgFormular_FormularPriority >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_freq;
        break;
      }

      // optional int32 freq = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freq_)));
          set_has_freq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_status;
        break;
      }

      // optional .MsgFormular.FormularStatus status = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgFormular_FormularStatus_IsValid(value)) {
            set_status(static_cast< ::MsgFormular_FormularStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgFormular::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 formularId = 1;
  if (has_formularid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->formularid(), output);
  }

  // optional int32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // optional string unitId = 3;
  if (has_unitid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unitid().data(), this->unitid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->unitid(), output);
  }

  // optional string expr = 4;
  if (has_expr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->expr().data(), this->expr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->expr(), output);
  }

  // repeated string params = 5;
  for (int i = 0; i < this->params_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->params(i).data(), this->params(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->params(i), output);
  }

  // optional int32 mask = 6;
  if (has_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->mask(), output);
  }

  // optional .MsgFormular.FormularPriority priority = 7;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->priority(), output);
  }

  // optional int32 freq = 8;
  if (has_freq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->freq(), output);
  }

  // optional .MsgFormular.FormularStatus status = 9;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgFormular::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 formularId = 1;
  if (has_formularid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->formularid(), target);
  }

  // optional int32 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemid(), target);
  }

  // optional string unitId = 3;
  if (has_unitid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unitid().data(), this->unitid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->unitid(), target);
  }

  // optional string expr = 4;
  if (has_expr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->expr().data(), this->expr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->expr(), target);
  }

  // repeated string params = 5;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->params(i).data(), this->params(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->params(i), target);
  }

  // optional int32 mask = 6;
  if (has_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->mask(), target);
  }

  // optional .MsgFormular.FormularPriority priority = 7;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->priority(), target);
  }

  // optional int32 freq = 8;
  if (has_freq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->freq(), target);
  }

  // optional .MsgFormular.FormularStatus status = 9;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgFormular::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 formularId = 1;
    if (has_formularid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->formularid());
    }

    // optional int32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional string unitId = 3;
    if (has_unitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unitid());
    }

    // optional string expr = 4;
    if (has_expr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->expr());
    }

    // optional int32 mask = 6;
    if (has_mask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mask());
    }

    // optional .MsgFormular.FormularPriority priority = 7;
    if (has_priority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->priority());
    }

    // optional int32 freq = 8;
    if (has_freq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freq());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .MsgFormular.FormularStatus status = 9;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  // repeated string params = 5;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgFormular::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgFormular* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgFormular*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgFormular::MergeFrom(const MsgFormular& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_formularid()) {
      set_formularid(from.formularid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_unitid()) {
      set_unitid(from.unitid());
    }
    if (from.has_expr()) {
      set_expr(from.expr());
    }
    if (from.has_mask()) {
      set_mask(from.mask());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_freq()) {
      set_freq(from.freq());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgFormular::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgFormular::CopyFrom(const MsgFormular& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgFormular::IsInitialized() const {

  return true;
}

void MsgFormular::Swap(MsgFormular* other) {
  if (other != this) {
    std::swap(formularid_, other->formularid_);
    std::swap(itemid_, other->itemid_);
    std::swap(unitid_, other->unitid_);
    std::swap(expr_, other->expr_);
    params_.Swap(&other->params_);
    std::swap(mask_, other->mask_);
    std::swap(priority_, other->priority_);
    std::swap(freq_, other->freq_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgFormular::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgFormular_descriptor_;
  metadata.reflection = MsgFormular_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgResult_ResultCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgResult_ResultCode_descriptor_;
}
bool MsgResult_ResultCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgResult_ResultCode MsgResult::Success;
const MsgResult_ResultCode MsgResult::BadParamErr;
const MsgResult_ResultCode MsgResult::DeviceOfflineErr;
const MsgResult_ResultCode MsgResult::InternalErr;
const MsgResult_ResultCode MsgResult::ResultCode_MIN;
const MsgResult_ResultCode MsgResult::ResultCode_MAX;
const int MsgResult::ResultCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgResult::kResultFieldNumber;
const int MsgResult::kResultDoubleValFieldNumber;
#endif  // !_MSC_VER

MsgResult::MsgResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgResult::InitAsDefaultInstance() {
}

MsgResult::MsgResult(const MsgResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  resultdoubleval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgResult::~MsgResult() {
  SharedDtor();
}

void MsgResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgResult_descriptor_;
}

const MsgResult& MsgResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uarc_2eproto();
  return *default_instance_;
}

MsgResult* MsgResult::default_instance_ = NULL;

MsgResult* MsgResult::New() const {
  return new MsgResult;
}

void MsgResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    resultdoubleval_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgResult.ResultCode result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgResult_ResultCode_IsValid(value)) {
            set_result(static_cast< ::MsgResult_ResultCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_resultDoubleVal;
        break;
      }

      // optional double resultDoubleVal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_resultDoubleVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &resultdoubleval_)));
          set_has_resultdoubleval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MsgResult.ResultCode result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional double resultDoubleVal = 2;
  if (has_resultdoubleval()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->resultdoubleval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MsgResult.ResultCode result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional double resultDoubleVal = 2;
  if (has_resultdoubleval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->resultdoubleval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgResult.ResultCode result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional double resultDoubleVal = 2;
    if (has_resultdoubleval()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgResult::MergeFrom(const MsgResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_resultdoubleval()) {
      set_resultdoubleval(from.resultdoubleval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgResult::CopyFrom(const MsgResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgResult::IsInitialized() const {

  return true;
}

void MsgResult::Swap(MsgResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(resultdoubleval_, other->resultdoubleval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgResult_descriptor_;
  metadata.reflection = MsgResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MsgBatchResults_ResultBatchCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgBatchResults_ResultBatchCode_descriptor_;
}
bool MsgBatchResults_ResultBatchCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MsgBatchResults_ResultBatchCode MsgBatchResults::Success;
const MsgBatchResults_ResultBatchCode MsgBatchResults::BadParamErr;
const MsgBatchResults_ResultBatchCode MsgBatchResults::DeviceOfflineErr;
const MsgBatchResults_ResultBatchCode MsgBatchResults::InternalErr;
const MsgBatchResults_ResultBatchCode MsgBatchResults::ResultBatchCode_MIN;
const MsgBatchResults_ResultBatchCode MsgBatchResults::ResultBatchCode_MAX;
const int MsgBatchResults::ResultBatchCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MsgBatchResults::kResultFieldNumber;
const int MsgBatchResults::kUnitIdsFieldNumber;
const int MsgBatchResults::kItemIdsFieldNumber;
const int MsgBatchResults::kValuesFieldNumber;
#endif  // !_MSC_VER

MsgBatchResults::MsgBatchResults()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgBatchResults::InitAsDefaultInstance() {
}

MsgBatchResults::MsgBatchResults(const MsgBatchResults& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgBatchResults::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgBatchResults::~MsgBatchResults() {
  SharedDtor();
}

void MsgBatchResults::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgBatchResults::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgBatchResults::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgBatchResults_descriptor_;
}

const MsgBatchResults& MsgBatchResults::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_uarc_2eproto();
  return *default_instance_;
}

MsgBatchResults* MsgBatchResults::default_instance_ = NULL;

MsgBatchResults* MsgBatchResults::New() const {
  return new MsgBatchResults;
}

void MsgBatchResults::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  unitids_.Clear();
  itemids_.Clear();
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgBatchResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgBatchResults.ResultBatchCode result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MsgBatchResults_ResultBatchCode_IsValid(value)) {
            set_result(static_cast< ::MsgBatchResults_ResultBatchCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_unitIds;
        break;
      }

      // repeated string unitIds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitIds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_unitids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unitids(this->unitids_size() - 1).data(),
            this->unitids(this->unitids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_unitIds;
        if (input->ExpectTag(24)) goto parse_itemIds;
        break;
      }

      // repeated int32 itemIds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_itemids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_itemids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemIds;
        if (input->ExpectTag(33)) goto parse_values;
        break;
      }

      // repeated double values = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 33, input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgBatchResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MsgBatchResults.ResultBatchCode result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated string unitIds = 2;
  for (int i = 0; i < this->unitids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->unitids(i).data(), this->unitids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->unitids(i), output);
  }

  // repeated int32 itemIds = 3;
  for (int i = 0; i < this->itemids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->itemids(i), output);
  }

  // repeated double values = 4;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      4, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgBatchResults::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MsgBatchResults.ResultBatchCode result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated string unitIds = 2;
  for (int i = 0; i < this->unitids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unitids(i).data(), this->unitids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->unitids(i), target);
  }

  // repeated int32 itemIds = 3;
  for (int i = 0; i < this->itemids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->itemids(i), target);
  }

  // repeated double values = 4;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(4, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgBatchResults::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MsgBatchResults.ResultBatchCode result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  // repeated string unitIds = 2;
  total_size += 1 * this->unitids_size();
  for (int i = 0; i < this->unitids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->unitids(i));
  }

  // repeated int32 itemIds = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->itemids(i));
    }
    total_size += 1 * this->itemids_size() + data_size;
  }

  // repeated double values = 4;
  {
    int data_size = 0;
    data_size = 8 * this->values_size();
    total_size += 1 * this->values_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgBatchResults::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgBatchResults* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgBatchResults*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgBatchResults::MergeFrom(const MsgBatchResults& from) {
  GOOGLE_CHECK_NE(&from, this);
  unitids_.MergeFrom(from.unitids_);
  itemids_.MergeFrom(from.itemids_);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgBatchResults::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBatchResults::CopyFrom(const MsgBatchResults& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBatchResults::IsInitialized() const {

  return true;
}

void MsgBatchResults::Swap(MsgBatchResults* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    unitids_.Swap(&other->unitids_);
    itemids_.Swap(&other->itemids_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgBatchResults::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgBatchResults_descriptor_;
  metadata.reflection = MsgBatchResults_reflection_;
  return metadata;
}


// ===================================================================

UarcService::~UarcService() {}

const ::google::protobuf::ServiceDescriptor* UarcService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UarcService_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* UarcService::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return UarcService_descriptor_;
}

void UarcService::UarcSendSchedule(::google::protobuf::RpcController* controller,
                         const ::MsgSchedule*,
                         ::MsgResult*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UarcSendSchedule() not implemented.");
  done->Run();
}

void UarcService::UarcSetDevice(::google::protobuf::RpcController* controller,
                         const ::MsgDevice*,
                         ::MsgResult*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UarcSetDevice() not implemented.");
  done->Run();
}

void UarcService::UarcSetCollTask(::google::protobuf::RpcController* controller,
                         const ::MsgCollTask*,
                         ::MsgResult*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UarcSetCollTask() not implemented.");
  done->Run();
}

void UarcService::UarcSetItemCode(::google::protobuf::RpcController* controller,
                         const ::MsgItemCode*,
                         ::MsgResult*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UarcSetItemCode() not implemented.");
  done->Run();
}

void UarcService::UarcSetFormular(::google::protobuf::RpcController* controller,
                         const ::MsgFormular*,
                         ::MsgResult*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UarcSetFormular() not implemented.");
  done->Run();
}

void UarcService::UarcCallData(::google::protobuf::RpcController* controller,
                         const ::MsgCallData*,
                         ::MsgResult*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UarcCallData() not implemented.");
  done->Run();
}

void UarcService::UarcBatchCallData(::google::protobuf::RpcController* controller,
                         const ::MsgBatchCallData*,
                         ::MsgBatchResults*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UarcBatchCallData() not implemented.");
  done->Run();
}

void UarcService::UarcDeviceControl(::google::protobuf::RpcController* controller,
                         const ::MsgControl*,
                         ::MsgResult*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UarcDeviceControl() not implemented.");
  done->Run();
}

void UarcService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), UarcService_descriptor_);
  switch(method->index()) {
    case 0:
      UarcSendSchedule(controller,
             ::google::protobuf::down_cast<const ::MsgSchedule*>(request),
             ::google::protobuf::down_cast< ::MsgResult*>(response),
             done);
      break;
    case 1:
      UarcSetDevice(controller,
             ::google::protobuf::down_cast<const ::MsgDevice*>(request),
             ::google::protobuf::down_cast< ::MsgResult*>(response),
             done);
      break;
    case 2:
      UarcSetCollTask(controller,
             ::google::protobuf::down_cast<const ::MsgCollTask*>(request),
             ::google::protobuf::down_cast< ::MsgResult*>(response),
             done);
      break;
    case 3:
      UarcSetItemCode(controller,
             ::google::protobuf::down_cast<const ::MsgItemCode*>(request),
             ::google::protobuf::down_cast< ::MsgResult*>(response),
             done);
      break;
    case 4:
      UarcSetFormular(controller,
             ::google::protobuf::down_cast<const ::MsgFormular*>(request),
             ::google::protobuf::down_cast< ::MsgResult*>(response),
             done);
      break;
    case 5:
      UarcCallData(controller,
             ::google::protobuf::down_cast<const ::MsgCallData*>(request),
             ::google::protobuf::down_cast< ::MsgResult*>(response),
             done);
      break;
    case 6:
      UarcBatchCallData(controller,
             ::google::protobuf::down_cast<const ::MsgBatchCallData*>(request),
             ::google::protobuf::down_cast< ::MsgBatchResults*>(response),
             done);
      break;
    case 7:
      UarcDeviceControl(controller,
             ::google::protobuf::down_cast<const ::MsgControl*>(request),
             ::google::protobuf::down_cast< ::MsgResult*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& UarcService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::MsgSchedule::default_instance();
    case 1:
      return ::MsgDevice::default_instance();
    case 2:
      return ::MsgCollTask::default_instance();
    case 3:
      return ::MsgItemCode::default_instance();
    case 4:
      return ::MsgFormular::default_instance();
    case 5:
      return ::MsgCallData::default_instance();
    case 6:
      return ::MsgBatchCallData::default_instance();
    case 7:
      return ::MsgControl::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& UarcService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::MsgResult::default_instance();
    case 1:
      return ::MsgResult::default_instance();
    case 2:
      return ::MsgResult::default_instance();
    case 3:
      return ::MsgResult::default_instance();
    case 4:
      return ::MsgResult::default_instance();
    case 5:
      return ::MsgResult::default_instance();
    case 6:
      return ::MsgBatchResults::default_instance();
    case 7:
      return ::MsgResult::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

UarcService_Stub::UarcService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
UarcService_Stub::UarcService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
UarcService_Stub::~UarcService_Stub() {
  if (owns_channel_) delete channel_;
}

void UarcService_Stub::UarcSendSchedule(::google::protobuf::RpcController* controller,
                              const ::MsgSchedule* request,
                              ::MsgResult* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void UarcService_Stub::UarcSetDevice(::google::protobuf::RpcController* controller,
                              const ::MsgDevice* request,
                              ::MsgResult* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void UarcService_Stub::UarcSetCollTask(::google::protobuf::RpcController* controller,
                              const ::MsgCollTask* request,
                              ::MsgResult* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void UarcService_Stub::UarcSetItemCode(::google::protobuf::RpcController* controller,
                              const ::MsgItemCode* request,
                              ::MsgResult* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void UarcService_Stub::UarcSetFormular(::google::protobuf::RpcController* controller,
                              const ::MsgFormular* request,
                              ::MsgResult* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void UarcService_Stub::UarcCallData(::google::protobuf::RpcController* controller,
                              const ::MsgCallData* request,
                              ::MsgResult* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void UarcService_Stub::UarcBatchCallData(::google::protobuf::RpcController* controller,
                              const ::MsgBatchCallData* request,
                              ::MsgBatchResults* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void UarcService_Stub::UarcDeviceControl(::google::protobuf::RpcController* controller,
                              const ::MsgControl* request,
                              ::MsgResult* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
