// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: uarc.proto

#ifndef PROTOBUF_uarc_2eproto__INCLUDED
#define PROTOBUF_uarc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_uarc_2eproto();
void protobuf_AssignDesc_uarc_2eproto();
void protobuf_ShutdownFile_uarc_2eproto();

class MsgScheduleValue;
class MsgSchedule;
class MsgDevice;
class MsgItemCode;
class MsgCollTask;
class MsgCallData;
class MsgBatchCallData;
class MsgControl;
class MsgFormular;
class MsgResult;
class MsgBatchResults;

enum MsgDevice_DeviceLinkType {
  MsgDevice_DeviceLinkType_linkType_TCPIP = 0,
  MsgDevice_DeviceLinkType_linkType_RS485 = 1,
  MsgDevice_DeviceLinkType_linkType_USB = 2,
  MsgDevice_DeviceLinkType_linkType_DBLINK = 3
};
bool MsgDevice_DeviceLinkType_IsValid(int value);
const MsgDevice_DeviceLinkType MsgDevice_DeviceLinkType_DeviceLinkType_MIN = MsgDevice_DeviceLinkType_linkType_TCPIP;
const MsgDevice_DeviceLinkType MsgDevice_DeviceLinkType_DeviceLinkType_MAX = MsgDevice_DeviceLinkType_linkType_DBLINK;
const int MsgDevice_DeviceLinkType_DeviceLinkType_ARRAYSIZE = MsgDevice_DeviceLinkType_DeviceLinkType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgDevice_DeviceLinkType_descriptor();
inline const ::std::string& MsgDevice_DeviceLinkType_Name(MsgDevice_DeviceLinkType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgDevice_DeviceLinkType_descriptor(), value);
}
inline bool MsgDevice_DeviceLinkType_Parse(
    const ::std::string& name, MsgDevice_DeviceLinkType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgDevice_DeviceLinkType>(
    MsgDevice_DeviceLinkType_descriptor(), name, value);
}
enum MsgDevice_DeviceProtocol {
  MsgDevice_DeviceProtocol_Protocol_newEnergyEffi = 0,
  MsgDevice_DeviceProtocol_Protocol_376 = 1,
  MsgDevice_DeviceProtocol_Protocol_ModBus = 2,
  MsgDevice_DeviceProtocol_Protocol_104 = 3
};
bool MsgDevice_DeviceProtocol_IsValid(int value);
const MsgDevice_DeviceProtocol MsgDevice_DeviceProtocol_DeviceProtocol_MIN = MsgDevice_DeviceProtocol_Protocol_newEnergyEffi;
const MsgDevice_DeviceProtocol MsgDevice_DeviceProtocol_DeviceProtocol_MAX = MsgDevice_DeviceProtocol_Protocol_104;
const int MsgDevice_DeviceProtocol_DeviceProtocol_ARRAYSIZE = MsgDevice_DeviceProtocol_DeviceProtocol_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgDevice_DeviceProtocol_descriptor();
inline const ::std::string& MsgDevice_DeviceProtocol_Name(MsgDevice_DeviceProtocol value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgDevice_DeviceProtocol_descriptor(), value);
}
inline bool MsgDevice_DeviceProtocol_Parse(
    const ::std::string& name, MsgDevice_DeviceProtocol* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgDevice_DeviceProtocol>(
    MsgDevice_DeviceProtocol_descriptor(), name, value);
}
enum MsgDevice_DeviceStatus {
  MsgDevice_DeviceStatus_DeviceUnavailable = 0,
  MsgDevice_DeviceStatus_DeviceAvailable = 1
};
bool MsgDevice_DeviceStatus_IsValid(int value);
const MsgDevice_DeviceStatus MsgDevice_DeviceStatus_DeviceStatus_MIN = MsgDevice_DeviceStatus_DeviceUnavailable;
const MsgDevice_DeviceStatus MsgDevice_DeviceStatus_DeviceStatus_MAX = MsgDevice_DeviceStatus_DeviceAvailable;
const int MsgDevice_DeviceStatus_DeviceStatus_ARRAYSIZE = MsgDevice_DeviceStatus_DeviceStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgDevice_DeviceStatus_descriptor();
inline const ::std::string& MsgDevice_DeviceStatus_Name(MsgDevice_DeviceStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgDevice_DeviceStatus_descriptor(), value);
}
inline bool MsgDevice_DeviceStatus_Parse(
    const ::std::string& name, MsgDevice_DeviceStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgDevice_DeviceStatus>(
    MsgDevice_DeviceStatus_descriptor(), name, value);
}
enum MsgItemCode_ItemCodeType {
  MsgItemCode_ItemCodeType_ItemCodeAnalogVal = 0,
  MsgItemCode_ItemCodeType_ItemCodeDigitalVal = 1,
  MsgItemCode_ItemCodeType_ItemCodeDisplayVal = 2
};
bool MsgItemCode_ItemCodeType_IsValid(int value);
const MsgItemCode_ItemCodeType MsgItemCode_ItemCodeType_ItemCodeType_MIN = MsgItemCode_ItemCodeType_ItemCodeAnalogVal;
const MsgItemCode_ItemCodeType MsgItemCode_ItemCodeType_ItemCodeType_MAX = MsgItemCode_ItemCodeType_ItemCodeDisplayVal;
const int MsgItemCode_ItemCodeType_ItemCodeType_ARRAYSIZE = MsgItemCode_ItemCodeType_ItemCodeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgItemCode_ItemCodeType_descriptor();
inline const ::std::string& MsgItemCode_ItemCodeType_Name(MsgItemCode_ItemCodeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgItemCode_ItemCodeType_descriptor(), value);
}
inline bool MsgItemCode_ItemCodeType_Parse(
    const ::std::string& name, MsgItemCode_ItemCodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgItemCode_ItemCodeType>(
    MsgItemCode_ItemCodeType_descriptor(), name, value);
}
enum MsgItemCode_ItemSrcType {
  MsgItemCode_ItemSrcType_DeviceCollect = 0,
  MsgItemCode_ItemSrcType_CalculateResult = 1
};
bool MsgItemCode_ItemSrcType_IsValid(int value);
const MsgItemCode_ItemSrcType MsgItemCode_ItemSrcType_ItemSrcType_MIN = MsgItemCode_ItemSrcType_DeviceCollect;
const MsgItemCode_ItemSrcType MsgItemCode_ItemSrcType_ItemSrcType_MAX = MsgItemCode_ItemSrcType_CalculateResult;
const int MsgItemCode_ItemSrcType_ItemSrcType_ARRAYSIZE = MsgItemCode_ItemSrcType_ItemSrcType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgItemCode_ItemSrcType_descriptor();
inline const ::std::string& MsgItemCode_ItemSrcType_Name(MsgItemCode_ItemSrcType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgItemCode_ItemSrcType_descriptor(), value);
}
inline bool MsgItemCode_ItemSrcType_Parse(
    const ::std::string& name, MsgItemCode_ItemSrcType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgItemCode_ItemSrcType>(
    MsgItemCode_ItemSrcType_descriptor(), name, value);
}
enum MsgItemCode_ItemWarnType {
  MsgItemCode_ItemWarnType_ItemCodeWarnNo = 0,
  MsgItemCode_ItemWarnType_ItemCodeWarnLog = 1,
  MsgItemCode_ItemWarnType_ItemCodeWarnSql = 2
};
bool MsgItemCode_ItemWarnType_IsValid(int value);
const MsgItemCode_ItemWarnType MsgItemCode_ItemWarnType_ItemWarnType_MIN = MsgItemCode_ItemWarnType_ItemCodeWarnNo;
const MsgItemCode_ItemWarnType MsgItemCode_ItemWarnType_ItemWarnType_MAX = MsgItemCode_ItemWarnType_ItemCodeWarnSql;
const int MsgItemCode_ItemWarnType_ItemWarnType_ARRAYSIZE = MsgItemCode_ItemWarnType_ItemWarnType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgItemCode_ItemWarnType_descriptor();
inline const ::std::string& MsgItemCode_ItemWarnType_Name(MsgItemCode_ItemWarnType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgItemCode_ItemWarnType_descriptor(), value);
}
inline bool MsgItemCode_ItemWarnType_Parse(
    const ::std::string& name, MsgItemCode_ItemWarnType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgItemCode_ItemWarnType>(
    MsgItemCode_ItemWarnType_descriptor(), name, value);
}
enum MsgItemCode_ItemCodeStatus {
  MsgItemCode_ItemCodeStatus_ItemCodeUnavailable = 0,
  MsgItemCode_ItemCodeStatus_ItemCodeAvailable = 1
};
bool MsgItemCode_ItemCodeStatus_IsValid(int value);
const MsgItemCode_ItemCodeStatus MsgItemCode_ItemCodeStatus_ItemCodeStatus_MIN = MsgItemCode_ItemCodeStatus_ItemCodeUnavailable;
const MsgItemCode_ItemCodeStatus MsgItemCode_ItemCodeStatus_ItemCodeStatus_MAX = MsgItemCode_ItemCodeStatus_ItemCodeAvailable;
const int MsgItemCode_ItemCodeStatus_ItemCodeStatus_ARRAYSIZE = MsgItemCode_ItemCodeStatus_ItemCodeStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgItemCode_ItemCodeStatus_descriptor();
inline const ::std::string& MsgItemCode_ItemCodeStatus_Name(MsgItemCode_ItemCodeStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgItemCode_ItemCodeStatus_descriptor(), value);
}
inline bool MsgItemCode_ItemCodeStatus_Parse(
    const ::std::string& name, MsgItemCode_ItemCodeStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgItemCode_ItemCodeStatus>(
    MsgItemCode_ItemCodeStatus_descriptor(), name, value);
}
enum MsgItemCode_ItemStoreType {
  MsgItemCode_ItemStoreType_ItemNoStore = 0,
  MsgItemCode_ItemStoreType_ItemDayStore = 1,
  MsgItemCode_ItemStoreType_ItemSecCollStore = 2
};
bool MsgItemCode_ItemStoreType_IsValid(int value);
const MsgItemCode_ItemStoreType MsgItemCode_ItemStoreType_ItemStoreType_MIN = MsgItemCode_ItemStoreType_ItemNoStore;
const MsgItemCode_ItemStoreType MsgItemCode_ItemStoreType_ItemStoreType_MAX = MsgItemCode_ItemStoreType_ItemSecCollStore;
const int MsgItemCode_ItemStoreType_ItemStoreType_ARRAYSIZE = MsgItemCode_ItemStoreType_ItemStoreType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgItemCode_ItemStoreType_descriptor();
inline const ::std::string& MsgItemCode_ItemStoreType_Name(MsgItemCode_ItemStoreType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgItemCode_ItemStoreType_descriptor(), value);
}
inline bool MsgItemCode_ItemStoreType_Parse(
    const ::std::string& name, MsgItemCode_ItemStoreType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgItemCode_ItemStoreType>(
    MsgItemCode_ItemStoreType_descriptor(), name, value);
}
enum MsgCollTask_TaskStatus {
  MsgCollTask_TaskStatus_TaskUnavailable = 0,
  MsgCollTask_TaskStatus_TaskAvailable = 1
};
bool MsgCollTask_TaskStatus_IsValid(int value);
const MsgCollTask_TaskStatus MsgCollTask_TaskStatus_TaskStatus_MIN = MsgCollTask_TaskStatus_TaskUnavailable;
const MsgCollTask_TaskStatus MsgCollTask_TaskStatus_TaskStatus_MAX = MsgCollTask_TaskStatus_TaskAvailable;
const int MsgCollTask_TaskStatus_TaskStatus_ARRAYSIZE = MsgCollTask_TaskStatus_TaskStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgCollTask_TaskStatus_descriptor();
inline const ::std::string& MsgCollTask_TaskStatus_Name(MsgCollTask_TaskStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgCollTask_TaskStatus_descriptor(), value);
}
inline bool MsgCollTask_TaskStatus_Parse(
    const ::std::string& name, MsgCollTask_TaskStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgCollTask_TaskStatus>(
    MsgCollTask_TaskStatus_descriptor(), name, value);
}
enum MsgFormular_FormularPriority {
  MsgFormular_FormularPriority_Level1 = 1,
  MsgFormular_FormularPriority_Level2 = 2,
  MsgFormular_FormularPriority_Level3 = 3,
  MsgFormular_FormularPriority_Level4 = 4,
  MsgFormular_FormularPriority_Level5 = 5
};
bool MsgFormular_FormularPriority_IsValid(int value);
const MsgFormular_FormularPriority MsgFormular_FormularPriority_FormularPriority_MIN = MsgFormular_FormularPriority_Level1;
const MsgFormular_FormularPriority MsgFormular_FormularPriority_FormularPriority_MAX = MsgFormular_FormularPriority_Level5;
const int MsgFormular_FormularPriority_FormularPriority_ARRAYSIZE = MsgFormular_FormularPriority_FormularPriority_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgFormular_FormularPriority_descriptor();
inline const ::std::string& MsgFormular_FormularPriority_Name(MsgFormular_FormularPriority value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgFormular_FormularPriority_descriptor(), value);
}
inline bool MsgFormular_FormularPriority_Parse(
    const ::std::string& name, MsgFormular_FormularPriority* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgFormular_FormularPriority>(
    MsgFormular_FormularPriority_descriptor(), name, value);
}
enum MsgFormular_FormularStatus {
  MsgFormular_FormularStatus_FormularUnavailable = 0,
  MsgFormular_FormularStatus_FormularAvailable = 1
};
bool MsgFormular_FormularStatus_IsValid(int value);
const MsgFormular_FormularStatus MsgFormular_FormularStatus_FormularStatus_MIN = MsgFormular_FormularStatus_FormularUnavailable;
const MsgFormular_FormularStatus MsgFormular_FormularStatus_FormularStatus_MAX = MsgFormular_FormularStatus_FormularAvailable;
const int MsgFormular_FormularStatus_FormularStatus_ARRAYSIZE = MsgFormular_FormularStatus_FormularStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgFormular_FormularStatus_descriptor();
inline const ::std::string& MsgFormular_FormularStatus_Name(MsgFormular_FormularStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgFormular_FormularStatus_descriptor(), value);
}
inline bool MsgFormular_FormularStatus_Parse(
    const ::std::string& name, MsgFormular_FormularStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgFormular_FormularStatus>(
    MsgFormular_FormularStatus_descriptor(), name, value);
}
enum MsgResult_ResultCode {
  MsgResult_ResultCode_Success = 1,
  MsgResult_ResultCode_BadParamErr = 2,
  MsgResult_ResultCode_DeviceOfflineErr = 3,
  MsgResult_ResultCode_InternalErr = 4
};
bool MsgResult_ResultCode_IsValid(int value);
const MsgResult_ResultCode MsgResult_ResultCode_ResultCode_MIN = MsgResult_ResultCode_Success;
const MsgResult_ResultCode MsgResult_ResultCode_ResultCode_MAX = MsgResult_ResultCode_InternalErr;
const int MsgResult_ResultCode_ResultCode_ARRAYSIZE = MsgResult_ResultCode_ResultCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgResult_ResultCode_descriptor();
inline const ::std::string& MsgResult_ResultCode_Name(MsgResult_ResultCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgResult_ResultCode_descriptor(), value);
}
inline bool MsgResult_ResultCode_Parse(
    const ::std::string& name, MsgResult_ResultCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgResult_ResultCode>(
    MsgResult_ResultCode_descriptor(), name, value);
}
enum MsgBatchResults_ResultBatchCode {
  MsgBatchResults_ResultBatchCode_Success = 1,
  MsgBatchResults_ResultBatchCode_BadParamErr = 2,
  MsgBatchResults_ResultBatchCode_DeviceOfflineErr = 3,
  MsgBatchResults_ResultBatchCode_InternalErr = 4
};
bool MsgBatchResults_ResultBatchCode_IsValid(int value);
const MsgBatchResults_ResultBatchCode MsgBatchResults_ResultBatchCode_ResultBatchCode_MIN = MsgBatchResults_ResultBatchCode_Success;
const MsgBatchResults_ResultBatchCode MsgBatchResults_ResultBatchCode_ResultBatchCode_MAX = MsgBatchResults_ResultBatchCode_InternalErr;
const int MsgBatchResults_ResultBatchCode_ResultBatchCode_ARRAYSIZE = MsgBatchResults_ResultBatchCode_ResultBatchCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgBatchResults_ResultBatchCode_descriptor();
inline const ::std::string& MsgBatchResults_ResultBatchCode_Name(MsgBatchResults_ResultBatchCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgBatchResults_ResultBatchCode_descriptor(), value);
}
inline bool MsgBatchResults_ResultBatchCode_Parse(
    const ::std::string& name, MsgBatchResults_ResultBatchCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgBatchResults_ResultBatchCode>(
    MsgBatchResults_ResultBatchCode_descriptor(), name, value);
}
// ===================================================================

class MsgScheduleValue : public ::google::protobuf::Message {
 public:
  MsgScheduleValue();
  virtual ~MsgScheduleValue();

  MsgScheduleValue(const MsgScheduleValue& from);

  inline MsgScheduleValue& operator=(const MsgScheduleValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgScheduleValue& default_instance();

  void Swap(MsgScheduleValue* other);

  // implements Message ----------------------------------------------

  MsgScheduleValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgScheduleValue& from);
  void MergeFrom(const MsgScheduleValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 deviceId = 1;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceIdFieldNumber = 1;
  inline ::google::protobuf::int32 deviceid() const;
  inline void set_deviceid(::google::protobuf::int32 value);

  // optional int32 termId = 2;
  inline bool has_termid() const;
  inline void clear_termid();
  static const int kTermIdFieldNumber = 2;
  inline ::google::protobuf::int32 termid() const;
  inline void set_termid(::google::protobuf::int32 value);

  // optional int32 itemId = 3;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 3;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // repeated int32 scheduleTime = 4;
  inline int scheduletime_size() const;
  inline void clear_scheduletime();
  static const int kScheduleTimeFieldNumber = 4;
  inline ::google::protobuf::int32 scheduletime(int index) const;
  inline void set_scheduletime(int index, ::google::protobuf::int32 value);
  inline void add_scheduletime(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      scheduletime() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_scheduletime();

  // repeated double scheduleValue = 5;
  inline int schedulevalue_size() const;
  inline void clear_schedulevalue();
  static const int kScheduleValueFieldNumber = 5;
  inline double schedulevalue(int index) const;
  inline void set_schedulevalue(int index, double value);
  inline void add_schedulevalue(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      schedulevalue() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_schedulevalue();

  // @@protoc_insertion_point(class_scope:MsgScheduleValue)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_termid();
  inline void clear_has_termid();
  inline void set_has_itemid();
  inline void clear_has_itemid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 deviceid_;
  ::google::protobuf::int32 termid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > scheduletime_;
  ::google::protobuf::RepeatedField< double > schedulevalue_;
  ::google::protobuf::int32 itemid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_uarc_2eproto();
  friend void protobuf_AssignDesc_uarc_2eproto();
  friend void protobuf_ShutdownFile_uarc_2eproto();

  void InitAsDefaultInstance();
  static MsgScheduleValue* default_instance_;
};
// -------------------------------------------------------------------

class MsgSchedule : public ::google::protobuf::Message {
 public:
  MsgSchedule();
  virtual ~MsgSchedule();

  MsgSchedule(const MsgSchedule& from);

  inline MsgSchedule& operator=(const MsgSchedule& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgSchedule& default_instance();

  void Swap(MsgSchedule* other);

  // implements Message ----------------------------------------------

  MsgSchedule* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgSchedule& from);
  void MergeFrom(const MsgSchedule& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MsgScheduleValue scheduleValues = 1;
  inline int schedulevalues_size() const;
  inline void clear_schedulevalues();
  static const int kScheduleValuesFieldNumber = 1;
  inline const ::MsgScheduleValue& schedulevalues(int index) const;
  inline ::MsgScheduleValue* mutable_schedulevalues(int index);
  inline ::MsgScheduleValue* add_schedulevalues();
  inline const ::google::protobuf::RepeatedPtrField< ::MsgScheduleValue >&
      schedulevalues() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgScheduleValue >*
      mutable_schedulevalues();

  // optional int32 date = 2;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 2;
  inline ::google::protobuf::int32 date() const;
  inline void set_date(::google::protobuf::int32 value);

  // optional int32 startTime = 3;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 3;
  inline ::google::protobuf::int32 starttime() const;
  inline void set_starttime(::google::protobuf::int32 value);

  // optional int32 controlTime = 4;
  inline bool has_controltime() const;
  inline void clear_controltime();
  static const int kControlTimeFieldNumber = 4;
  inline ::google::protobuf::int32 controltime() const;
  inline void set_controltime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MsgSchedule)
 private:
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_controltime();
  inline void clear_has_controltime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MsgScheduleValue > schedulevalues_;
  ::google::protobuf::int32 date_;
  ::google::protobuf::int32 starttime_;
  ::google::protobuf::int32 controltime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_uarc_2eproto();
  friend void protobuf_AssignDesc_uarc_2eproto();
  friend void protobuf_ShutdownFile_uarc_2eproto();

  void InitAsDefaultInstance();
  static MsgSchedule* default_instance_;
};
// -------------------------------------------------------------------

class MsgDevice : public ::google::protobuf::Message {
 public:
  MsgDevice();
  virtual ~MsgDevice();

  MsgDevice(const MsgDevice& from);

  inline MsgDevice& operator=(const MsgDevice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgDevice& default_instance();

  void Swap(MsgDevice* other);

  // implements Message ----------------------------------------------

  MsgDevice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgDevice& from);
  void MergeFrom(const MsgDevice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MsgDevice_DeviceLinkType DeviceLinkType;
  static const DeviceLinkType linkType_TCPIP = MsgDevice_DeviceLinkType_linkType_TCPIP;
  static const DeviceLinkType linkType_RS485 = MsgDevice_DeviceLinkType_linkType_RS485;
  static const DeviceLinkType linkType_USB = MsgDevice_DeviceLinkType_linkType_USB;
  static const DeviceLinkType linkType_DBLINK = MsgDevice_DeviceLinkType_linkType_DBLINK;
  static inline bool DeviceLinkType_IsValid(int value) {
    return MsgDevice_DeviceLinkType_IsValid(value);
  }
  static const DeviceLinkType DeviceLinkType_MIN =
    MsgDevice_DeviceLinkType_DeviceLinkType_MIN;
  static const DeviceLinkType DeviceLinkType_MAX =
    MsgDevice_DeviceLinkType_DeviceLinkType_MAX;
  static const int DeviceLinkType_ARRAYSIZE =
    MsgDevice_DeviceLinkType_DeviceLinkType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DeviceLinkType_descriptor() {
    return MsgDevice_DeviceLinkType_descriptor();
  }
  static inline const ::std::string& DeviceLinkType_Name(DeviceLinkType value) {
    return MsgDevice_DeviceLinkType_Name(value);
  }
  static inline bool DeviceLinkType_Parse(const ::std::string& name,
      DeviceLinkType* value) {
    return MsgDevice_DeviceLinkType_Parse(name, value);
  }

  typedef MsgDevice_DeviceProtocol DeviceProtocol;
  static const DeviceProtocol Protocol_newEnergyEffi = MsgDevice_DeviceProtocol_Protocol_newEnergyEffi;
  static const DeviceProtocol Protocol_376 = MsgDevice_DeviceProtocol_Protocol_376;
  static const DeviceProtocol Protocol_ModBus = MsgDevice_DeviceProtocol_Protocol_ModBus;
  static const DeviceProtocol Protocol_104 = MsgDevice_DeviceProtocol_Protocol_104;
  static inline bool DeviceProtocol_IsValid(int value) {
    return MsgDevice_DeviceProtocol_IsValid(value);
  }
  static const DeviceProtocol DeviceProtocol_MIN =
    MsgDevice_DeviceProtocol_DeviceProtocol_MIN;
  static const DeviceProtocol DeviceProtocol_MAX =
    MsgDevice_DeviceProtocol_DeviceProtocol_MAX;
  static const int DeviceProtocol_ARRAYSIZE =
    MsgDevice_DeviceProtocol_DeviceProtocol_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DeviceProtocol_descriptor() {
    return MsgDevice_DeviceProtocol_descriptor();
  }
  static inline const ::std::string& DeviceProtocol_Name(DeviceProtocol value) {
    return MsgDevice_DeviceProtocol_Name(value);
  }
  static inline bool DeviceProtocol_Parse(const ::std::string& name,
      DeviceProtocol* value) {
    return MsgDevice_DeviceProtocol_Parse(name, value);
  }

  typedef MsgDevice_DeviceStatus DeviceStatus;
  static const DeviceStatus DeviceUnavailable = MsgDevice_DeviceStatus_DeviceUnavailable;
  static const DeviceStatus DeviceAvailable = MsgDevice_DeviceStatus_DeviceAvailable;
  static inline bool DeviceStatus_IsValid(int value) {
    return MsgDevice_DeviceStatus_IsValid(value);
  }
  static const DeviceStatus DeviceStatus_MIN =
    MsgDevice_DeviceStatus_DeviceStatus_MIN;
  static const DeviceStatus DeviceStatus_MAX =
    MsgDevice_DeviceStatus_DeviceStatus_MAX;
  static const int DeviceStatus_ARRAYSIZE =
    MsgDevice_DeviceStatus_DeviceStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DeviceStatus_descriptor() {
    return MsgDevice_DeviceStatus_descriptor();
  }
  static inline const ::std::string& DeviceStatus_Name(DeviceStatus value) {
    return MsgDevice_DeviceStatus_Name(value);
  }
  static inline bool DeviceStatus_Parse(const ::std::string& name,
      DeviceStatus* value) {
    return MsgDevice_DeviceStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 deviceId = 1;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceIdFieldNumber = 1;
  inline ::google::protobuf::int32 deviceid() const;
  inline void set_deviceid(::google::protobuf::int32 value);

  // optional string address = 2;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 2;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // optional int32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional string identity = 4;
  inline bool has_identity() const;
  inline void clear_identity();
  static const int kIdentityFieldNumber = 4;
  inline const ::std::string& identity() const;
  inline void set_identity(const ::std::string& value);
  inline void set_identity(const char* value);
  inline void set_identity(const char* value, size_t size);
  inline ::std::string* mutable_identity();
  inline ::std::string* release_identity();
  inline void set_allocated_identity(::std::string* identity);

  // optional .MsgDevice.DeviceLinkType linkType = 5;
  inline bool has_linktype() const;
  inline void clear_linktype();
  static const int kLinkTypeFieldNumber = 5;
  inline ::MsgDevice_DeviceLinkType linktype() const;
  inline void set_linktype(::MsgDevice_DeviceLinkType value);

  // optional .MsgDevice.DeviceProtocol protocol = 6;
  inline bool has_protocol() const;
  inline void clear_protocol();
  static const int kProtocolFieldNumber = 6;
  inline ::MsgDevice_DeviceProtocol protocol() const;
  inline void set_protocol(::MsgDevice_DeviceProtocol value);

  // optional int32 heartBeat = 7;
  inline bool has_heartbeat() const;
  inline void clear_heartbeat();
  static const int kHeartBeatFieldNumber = 7;
  inline ::google::protobuf::int32 heartbeat() const;
  inline void set_heartbeat(::google::protobuf::int32 value);

  // optional .MsgDevice.DeviceStatus status = 8;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 8;
  inline ::MsgDevice_DeviceStatus status() const;
  inline void set_status(::MsgDevice_DeviceStatus value);

  // @@protoc_insertion_point(class_scope:MsgDevice)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_identity();
  inline void clear_has_identity();
  inline void set_has_linktype();
  inline void clear_has_linktype();
  inline void set_has_protocol();
  inline void clear_has_protocol();
  inline void set_has_heartbeat();
  inline void clear_has_heartbeat();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* address_;
  ::google::protobuf::int32 deviceid_;
  ::google::protobuf::int32 port_;
  ::std::string* identity_;
  int linktype_;
  int protocol_;
  ::google::protobuf::int32 heartbeat_;
  int status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_uarc_2eproto();
  friend void protobuf_AssignDesc_uarc_2eproto();
  friend void protobuf_ShutdownFile_uarc_2eproto();

  void InitAsDefaultInstance();
  static MsgDevice* default_instance_;
};
// -------------------------------------------------------------------

class MsgItemCode : public ::google::protobuf::Message {
 public:
  MsgItemCode();
  virtual ~MsgItemCode();

  MsgItemCode(const MsgItemCode& from);

  inline MsgItemCode& operator=(const MsgItemCode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgItemCode& default_instance();

  void Swap(MsgItemCode* other);

  // implements Message ----------------------------------------------

  MsgItemCode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgItemCode& from);
  void MergeFrom(const MsgItemCode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MsgItemCode_ItemCodeType ItemCodeType;
  static const ItemCodeType ItemCodeAnalogVal = MsgItemCode_ItemCodeType_ItemCodeAnalogVal;
  static const ItemCodeType ItemCodeDigitalVal = MsgItemCode_ItemCodeType_ItemCodeDigitalVal;
  static const ItemCodeType ItemCodeDisplayVal = MsgItemCode_ItemCodeType_ItemCodeDisplayVal;
  static inline bool ItemCodeType_IsValid(int value) {
    return MsgItemCode_ItemCodeType_IsValid(value);
  }
  static const ItemCodeType ItemCodeType_MIN =
    MsgItemCode_ItemCodeType_ItemCodeType_MIN;
  static const ItemCodeType ItemCodeType_MAX =
    MsgItemCode_ItemCodeType_ItemCodeType_MAX;
  static const int ItemCodeType_ARRAYSIZE =
    MsgItemCode_ItemCodeType_ItemCodeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ItemCodeType_descriptor() {
    return MsgItemCode_ItemCodeType_descriptor();
  }
  static inline const ::std::string& ItemCodeType_Name(ItemCodeType value) {
    return MsgItemCode_ItemCodeType_Name(value);
  }
  static inline bool ItemCodeType_Parse(const ::std::string& name,
      ItemCodeType* value) {
    return MsgItemCode_ItemCodeType_Parse(name, value);
  }

  typedef MsgItemCode_ItemSrcType ItemSrcType;
  static const ItemSrcType DeviceCollect = MsgItemCode_ItemSrcType_DeviceCollect;
  static const ItemSrcType CalculateResult = MsgItemCode_ItemSrcType_CalculateResult;
  static inline bool ItemSrcType_IsValid(int value) {
    return MsgItemCode_ItemSrcType_IsValid(value);
  }
  static const ItemSrcType ItemSrcType_MIN =
    MsgItemCode_ItemSrcType_ItemSrcType_MIN;
  static const ItemSrcType ItemSrcType_MAX =
    MsgItemCode_ItemSrcType_ItemSrcType_MAX;
  static const int ItemSrcType_ARRAYSIZE =
    MsgItemCode_ItemSrcType_ItemSrcType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ItemSrcType_descriptor() {
    return MsgItemCode_ItemSrcType_descriptor();
  }
  static inline const ::std::string& ItemSrcType_Name(ItemSrcType value) {
    return MsgItemCode_ItemSrcType_Name(value);
  }
  static inline bool ItemSrcType_Parse(const ::std::string& name,
      ItemSrcType* value) {
    return MsgItemCode_ItemSrcType_Parse(name, value);
  }

  typedef MsgItemCode_ItemWarnType ItemWarnType;
  static const ItemWarnType ItemCodeWarnNo = MsgItemCode_ItemWarnType_ItemCodeWarnNo;
  static const ItemWarnType ItemCodeWarnLog = MsgItemCode_ItemWarnType_ItemCodeWarnLog;
  static const ItemWarnType ItemCodeWarnSql = MsgItemCode_ItemWarnType_ItemCodeWarnSql;
  static inline bool ItemWarnType_IsValid(int value) {
    return MsgItemCode_ItemWarnType_IsValid(value);
  }
  static const ItemWarnType ItemWarnType_MIN =
    MsgItemCode_ItemWarnType_ItemWarnType_MIN;
  static const ItemWarnType ItemWarnType_MAX =
    MsgItemCode_ItemWarnType_ItemWarnType_MAX;
  static const int ItemWarnType_ARRAYSIZE =
    MsgItemCode_ItemWarnType_ItemWarnType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ItemWarnType_descriptor() {
    return MsgItemCode_ItemWarnType_descriptor();
  }
  static inline const ::std::string& ItemWarnType_Name(ItemWarnType value) {
    return MsgItemCode_ItemWarnType_Name(value);
  }
  static inline bool ItemWarnType_Parse(const ::std::string& name,
      ItemWarnType* value) {
    return MsgItemCode_ItemWarnType_Parse(name, value);
  }

  typedef MsgItemCode_ItemCodeStatus ItemCodeStatus;
  static const ItemCodeStatus ItemCodeUnavailable = MsgItemCode_ItemCodeStatus_ItemCodeUnavailable;
  static const ItemCodeStatus ItemCodeAvailable = MsgItemCode_ItemCodeStatus_ItemCodeAvailable;
  static inline bool ItemCodeStatus_IsValid(int value) {
    return MsgItemCode_ItemCodeStatus_IsValid(value);
  }
  static const ItemCodeStatus ItemCodeStatus_MIN =
    MsgItemCode_ItemCodeStatus_ItemCodeStatus_MIN;
  static const ItemCodeStatus ItemCodeStatus_MAX =
    MsgItemCode_ItemCodeStatus_ItemCodeStatus_MAX;
  static const int ItemCodeStatus_ARRAYSIZE =
    MsgItemCode_ItemCodeStatus_ItemCodeStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ItemCodeStatus_descriptor() {
    return MsgItemCode_ItemCodeStatus_descriptor();
  }
  static inline const ::std::string& ItemCodeStatus_Name(ItemCodeStatus value) {
    return MsgItemCode_ItemCodeStatus_Name(value);
  }
  static inline bool ItemCodeStatus_Parse(const ::std::string& name,
      ItemCodeStatus* value) {
    return MsgItemCode_ItemCodeStatus_Parse(name, value);
  }

  typedef MsgItemCode_ItemStoreType ItemStoreType;
  static const ItemStoreType ItemNoStore = MsgItemCode_ItemStoreType_ItemNoStore;
  static const ItemStoreType ItemDayStore = MsgItemCode_ItemStoreType_ItemDayStore;
  static const ItemStoreType ItemSecCollStore = MsgItemCode_ItemStoreType_ItemSecCollStore;
  static inline bool ItemStoreType_IsValid(int value) {
    return MsgItemCode_ItemStoreType_IsValid(value);
  }
  static const ItemStoreType ItemStoreType_MIN =
    MsgItemCode_ItemStoreType_ItemStoreType_MIN;
  static const ItemStoreType ItemStoreType_MAX =
    MsgItemCode_ItemStoreType_ItemStoreType_MAX;
  static const int ItemStoreType_ARRAYSIZE =
    MsgItemCode_ItemStoreType_ItemStoreType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ItemStoreType_descriptor() {
    return MsgItemCode_ItemStoreType_descriptor();
  }
  static inline const ::std::string& ItemStoreType_Name(ItemStoreType value) {
    return MsgItemCode_ItemStoreType_Name(value);
  }
  static inline bool ItemStoreType_Parse(const ::std::string& name,
      ItemStoreType* value) {
    return MsgItemCode_ItemStoreType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 itemId = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // optional string unitId = 2;
  inline bool has_unitid() const;
  inline void clear_unitid();
  static const int kUnitIdFieldNumber = 2;
  inline const ::std::string& unitid() const;
  inline void set_unitid(const ::std::string& value);
  inline void set_unitid(const char* value);
  inline void set_unitid(const char* value, size_t size);
  inline ::std::string* mutable_unitid();
  inline ::std::string* release_unitid();
  inline void set_allocated_unitid(::std::string* unitid);

  // optional int32 deviceId = 3;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceIdFieldNumber = 3;
  inline ::google::protobuf::int32 deviceid() const;
  inline void set_deviceid(::google::protobuf::int32 value);

  // optional .MsgItemCode.ItemCodeType itemType = 4;
  inline bool has_itemtype() const;
  inline void clear_itemtype();
  static const int kItemTypeFieldNumber = 4;
  inline ::MsgItemCode_ItemCodeType itemtype() const;
  inline void set_itemtype(::MsgItemCode_ItemCodeType value);

  // optional .MsgItemCode.ItemSrcType srcType = 5;
  inline bool has_srctype() const;
  inline void clear_srctype();
  static const int kSrcTypeFieldNumber = 5;
  inline ::MsgItemCode_ItemSrcType srctype() const;
  inline void set_srctype(::MsgItemCode_ItemSrcType value);

  // optional double upLimit = 6;
  inline bool has_uplimit() const;
  inline void clear_uplimit();
  static const int kUpLimitFieldNumber = 6;
  inline double uplimit() const;
  inline void set_uplimit(double value);

  // optional double downLimit = 7;
  inline bool has_downlimit() const;
  inline void clear_downlimit();
  static const int kDownLimitFieldNumber = 7;
  inline double downlimit() const;
  inline void set_downlimit(double value);

  // optional .MsgItemCode.ItemWarnType warnType = 8;
  inline bool has_warntype() const;
  inline void clear_warntype();
  static const int kWarnTypeFieldNumber = 8;
  inline ::MsgItemCode_ItemWarnType warntype() const;
  inline void set_warntype(::MsgItemCode_ItemWarnType value);

  // optional double baseval = 9;
  inline bool has_baseval() const;
  inline void clear_baseval();
  static const int kBasevalFieldNumber = 9;
  inline double baseval() const;
  inline void set_baseval(double value);

  // optional double coefficient = 10;
  inline bool has_coefficient() const;
  inline void clear_coefficient();
  static const int kCoefficientFieldNumber = 10;
  inline double coefficient() const;
  inline void set_coefficient(double value);

  // optional string dayStoreTime = 11;
  inline bool has_daystoretime() const;
  inline void clear_daystoretime();
  static const int kDayStoreTimeFieldNumber = 11;
  inline const ::std::string& daystoretime() const;
  inline void set_daystoretime(const ::std::string& value);
  inline void set_daystoretime(const char* value);
  inline void set_daystoretime(const char* value, size_t size);
  inline ::std::string* mutable_daystoretime();
  inline ::std::string* release_daystoretime();
  inline void set_allocated_daystoretime(::std::string* daystoretime);

  // optional string dayStoreSql = 12;
  inline bool has_daystoresql() const;
  inline void clear_daystoresql();
  static const int kDayStoreSqlFieldNumber = 12;
  inline const ::std::string& daystoresql() const;
  inline void set_daystoresql(const ::std::string& value);
  inline void set_daystoresql(const char* value);
  inline void set_daystoresql(const char* value, size_t size);
  inline ::std::string* mutable_daystoresql();
  inline ::std::string* release_daystoresql();
  inline void set_allocated_daystoresql(::std::string* daystoresql);

  // optional .MsgItemCode.ItemCodeStatus status = 13;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 13;
  inline ::MsgItemCode_ItemCodeStatus status() const;
  inline void set_status(::MsgItemCode_ItemCodeStatus value);

  // optional int32 termId = 14;
  inline bool has_termid() const;
  inline void clear_termid();
  static const int kTermIdFieldNumber = 14;
  inline ::google::protobuf::int32 termid() const;
  inline void set_termid(::google::protobuf::int32 value);

  // optional string warnStoreSql = 15;
  inline bool has_warnstoresql() const;
  inline void clear_warnstoresql();
  static const int kWarnStoreSqlFieldNumber = 15;
  inline const ::std::string& warnstoresql() const;
  inline void set_warnstoresql(const ::std::string& value);
  inline void set_warnstoresql(const char* value);
  inline void set_warnstoresql(const char* value, size_t size);
  inline ::std::string* mutable_warnstoresql();
  inline ::std::string* release_warnstoresql();
  inline void set_allocated_warnstoresql(::std::string* warnstoresql);

  // optional int32 secCollPeriod = 16;
  inline bool has_seccollperiod() const;
  inline void clear_seccollperiod();
  static const int kSecCollPeriodFieldNumber = 16;
  inline ::google::protobuf::int32 seccollperiod() const;
  inline void set_seccollperiod(::google::protobuf::int32 value);

  // optional string secCollSQL = 17;
  inline bool has_seccollsql() const;
  inline void clear_seccollsql();
  static const int kSecCollSQLFieldNumber = 17;
  inline const ::std::string& seccollsql() const;
  inline void set_seccollsql(const ::std::string& value);
  inline void set_seccollsql(const char* value);
  inline void set_seccollsql(const char* value, size_t size);
  inline ::std::string* mutable_seccollsql();
  inline ::std::string* release_seccollsql();
  inline void set_allocated_seccollsql(::std::string* seccollsql);

  // optional string secCollOtherSQL = 18;
  inline bool has_seccollothersql() const;
  inline void clear_seccollothersql();
  static const int kSecCollOtherSQLFieldNumber = 18;
  inline const ::std::string& seccollothersql() const;
  inline void set_seccollothersql(const ::std::string& value);
  inline void set_seccollothersql(const char* value);
  inline void set_seccollothersql(const char* value, size_t size);
  inline ::std::string* mutable_seccollothersql();
  inline ::std::string* release_seccollothersql();
  inline void set_allocated_seccollothersql(::std::string* seccollothersql);

  // optional .MsgItemCode.ItemStoreType storeType = 19;
  inline bool has_storetype() const;
  inline void clear_storetype();
  static const int kStoreTypeFieldNumber = 19;
  inline ::MsgItemCode_ItemStoreType storetype() const;
  inline void set_storetype(::MsgItemCode_ItemStoreType value);

  // @@protoc_insertion_point(class_scope:MsgItemCode)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_unitid();
  inline void clear_has_unitid();
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_itemtype();
  inline void clear_has_itemtype();
  inline void set_has_srctype();
  inline void clear_has_srctype();
  inline void set_has_uplimit();
  inline void clear_has_uplimit();
  inline void set_has_downlimit();
  inline void clear_has_downlimit();
  inline void set_has_warntype();
  inline void clear_has_warntype();
  inline void set_has_baseval();
  inline void clear_has_baseval();
  inline void set_has_coefficient();
  inline void clear_has_coefficient();
  inline void set_has_daystoretime();
  inline void clear_has_daystoretime();
  inline void set_has_daystoresql();
  inline void clear_has_daystoresql();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_termid();
  inline void clear_has_termid();
  inline void set_has_warnstoresql();
  inline void clear_has_warnstoresql();
  inline void set_has_seccollperiod();
  inline void clear_has_seccollperiod();
  inline void set_has_seccollsql();
  inline void clear_has_seccollsql();
  inline void set_has_seccollothersql();
  inline void clear_has_seccollothersql();
  inline void set_has_storetype();
  inline void clear_has_storetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* unitid_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 deviceid_;
  int itemtype_;
  int srctype_;
  double uplimit_;
  double downlimit_;
  double baseval_;
  double coefficient_;
  int warntype_;
  int status_;
  ::std::string* daystoretime_;
  ::std::string* daystoresql_;
  ::std::string* warnstoresql_;
  ::google::protobuf::int32 termid_;
  ::google::protobuf::int32 seccollperiod_;
  ::std::string* seccollsql_;
  ::std::string* seccollothersql_;
  int storetype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  friend void  protobuf_AddDesc_uarc_2eproto();
  friend void protobuf_AssignDesc_uarc_2eproto();
  friend void protobuf_ShutdownFile_uarc_2eproto();

  void InitAsDefaultInstance();
  static MsgItemCode* default_instance_;
};
// -------------------------------------------------------------------

class MsgCollTask : public ::google::protobuf::Message {
 public:
  MsgCollTask();
  virtual ~MsgCollTask();

  MsgCollTask(const MsgCollTask& from);

  inline MsgCollTask& operator=(const MsgCollTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgCollTask& default_instance();

  void Swap(MsgCollTask* other);

  // implements Message ----------------------------------------------

  MsgCollTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgCollTask& from);
  void MergeFrom(const MsgCollTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MsgCollTask_TaskStatus TaskStatus;
  static const TaskStatus TaskUnavailable = MsgCollTask_TaskStatus_TaskUnavailable;
  static const TaskStatus TaskAvailable = MsgCollTask_TaskStatus_TaskAvailable;
  static inline bool TaskStatus_IsValid(int value) {
    return MsgCollTask_TaskStatus_IsValid(value);
  }
  static const TaskStatus TaskStatus_MIN =
    MsgCollTask_TaskStatus_TaskStatus_MIN;
  static const TaskStatus TaskStatus_MAX =
    MsgCollTask_TaskStatus_TaskStatus_MAX;
  static const int TaskStatus_ARRAYSIZE =
    MsgCollTask_TaskStatus_TaskStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TaskStatus_descriptor() {
    return MsgCollTask_TaskStatus_descriptor();
  }
  static inline const ::std::string& TaskStatus_Name(TaskStatus value) {
    return MsgCollTask_TaskStatus_Name(value);
  }
  static inline bool TaskStatus_Parse(const ::std::string& name,
      TaskStatus* value) {
    return MsgCollTask_TaskStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 taskId = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::protobuf::int32 taskid() const;
  inline void set_taskid(::google::protobuf::int32 value);

  // optional string unitId = 2;
  inline bool has_unitid() const;
  inline void clear_unitid();
  static const int kUnitIdFieldNumber = 2;
  inline const ::std::string& unitid() const;
  inline void set_unitid(const ::std::string& value);
  inline void set_unitid(const char* value);
  inline void set_unitid(const char* value, size_t size);
  inline ::std::string* mutable_unitid();
  inline ::std::string* release_unitid();
  inline void set_allocated_unitid(::std::string* unitid);

  // repeated .MsgItemCode itemIds = 3;
  inline int itemids_size() const;
  inline void clear_itemids();
  static const int kItemIdsFieldNumber = 3;
  inline const ::MsgItemCode& itemids(int index) const;
  inline ::MsgItemCode* mutable_itemids(int index);
  inline ::MsgItemCode* add_itemids();
  inline const ::google::protobuf::RepeatedPtrField< ::MsgItemCode >&
      itemids() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgItemCode >*
      mutable_itemids();

  // optional int32 startDate = 4;
  inline bool has_startdate() const;
  inline void clear_startdate();
  static const int kStartDateFieldNumber = 4;
  inline ::google::protobuf::int32 startdate() const;
  inline void set_startdate(::google::protobuf::int32 value);

  // optional int32 freq = 5;
  inline bool has_freq() const;
  inline void clear_freq();
  static const int kFreqFieldNumber = 5;
  inline ::google::protobuf::int32 freq() const;
  inline void set_freq(::google::protobuf::int32 value);

  // optional .MsgCollTask.TaskStatus status = 6;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 6;
  inline ::MsgCollTask_TaskStatus status() const;
  inline void set_status(::MsgCollTask_TaskStatus value);

  // @@protoc_insertion_point(class_scope:MsgCollTask)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_unitid();
  inline void clear_has_unitid();
  inline void set_has_startdate();
  inline void clear_has_startdate();
  inline void set_has_freq();
  inline void clear_has_freq();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* unitid_;
  ::google::protobuf::int32 taskid_;
  ::google::protobuf::int32 startdate_;
  ::google::protobuf::RepeatedPtrField< ::MsgItemCode > itemids_;
  ::google::protobuf::int32 freq_;
  int status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_uarc_2eproto();
  friend void protobuf_AssignDesc_uarc_2eproto();
  friend void protobuf_ShutdownFile_uarc_2eproto();

  void InitAsDefaultInstance();
  static MsgCollTask* default_instance_;
};
// -------------------------------------------------------------------

class MsgCallData : public ::google::protobuf::Message {
 public:
  MsgCallData();
  virtual ~MsgCallData();

  MsgCallData(const MsgCallData& from);

  inline MsgCallData& operator=(const MsgCallData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgCallData& default_instance();

  void Swap(MsgCallData* other);

  // implements Message ----------------------------------------------

  MsgCallData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgCallData& from);
  void MergeFrom(const MsgCallData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string unitId = 1;
  inline bool has_unitid() const;
  inline void clear_unitid();
  static const int kUnitIdFieldNumber = 1;
  inline const ::std::string& unitid() const;
  inline void set_unitid(const ::std::string& value);
  inline void set_unitid(const char* value);
  inline void set_unitid(const char* value, size_t size);
  inline ::std::string* mutable_unitid();
  inline ::std::string* release_unitid();
  inline void set_allocated_unitid(::std::string* unitid);

  // optional int32 deviceId = 2;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceIdFieldNumber = 2;
  inline ::google::protobuf::int32 deviceid() const;
  inline void set_deviceid(::google::protobuf::int32 value);

  // optional int32 termId = 3;
  inline bool has_termid() const;
  inline void clear_termid();
  static const int kTermIdFieldNumber = 3;
  inline ::google::protobuf::int32 termid() const;
  inline void set_termid(::google::protobuf::int32 value);

  // optional int32 itemId = 4;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 4;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MsgCallData)
 private:
  inline void set_has_unitid();
  inline void clear_has_unitid();
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_termid();
  inline void clear_has_termid();
  inline void set_has_itemid();
  inline void clear_has_itemid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* unitid_;
  ::google::protobuf::int32 deviceid_;
  ::google::protobuf::int32 termid_;
  ::google::protobuf::int32 itemid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_uarc_2eproto();
  friend void protobuf_AssignDesc_uarc_2eproto();
  friend void protobuf_ShutdownFile_uarc_2eproto();

  void InitAsDefaultInstance();
  static MsgCallData* default_instance_;
};
// -------------------------------------------------------------------

class MsgBatchCallData : public ::google::protobuf::Message {
 public:
  MsgBatchCallData();
  virtual ~MsgBatchCallData();

  MsgBatchCallData(const MsgBatchCallData& from);

  inline MsgBatchCallData& operator=(const MsgBatchCallData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgBatchCallData& default_instance();

  void Swap(MsgBatchCallData* other);

  // implements Message ----------------------------------------------

  MsgBatchCallData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgBatchCallData& from);
  void MergeFrom(const MsgBatchCallData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string unitIds = 1;
  inline int unitids_size() const;
  inline void clear_unitids();
  static const int kUnitIdsFieldNumber = 1;
  inline const ::std::string& unitids(int index) const;
  inline ::std::string* mutable_unitids(int index);
  inline void set_unitids(int index, const ::std::string& value);
  inline void set_unitids(int index, const char* value);
  inline void set_unitids(int index, const char* value, size_t size);
  inline ::std::string* add_unitids();
  inline void add_unitids(const ::std::string& value);
  inline void add_unitids(const char* value);
  inline void add_unitids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& unitids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_unitids();

  // repeated int32 itemIds = 2;
  inline int itemids_size() const;
  inline void clear_itemids();
  static const int kItemIdsFieldNumber = 2;
  inline ::google::protobuf::int32 itemids(int index) const;
  inline void set_itemids(int index, ::google::protobuf::int32 value);
  inline void add_itemids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      itemids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_itemids();

  // @@protoc_insertion_point(class_scope:MsgBatchCallData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> unitids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > itemids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_uarc_2eproto();
  friend void protobuf_AssignDesc_uarc_2eproto();
  friend void protobuf_ShutdownFile_uarc_2eproto();

  void InitAsDefaultInstance();
  static MsgBatchCallData* default_instance_;
};
// -------------------------------------------------------------------

class MsgControl : public ::google::protobuf::Message {
 public:
  MsgControl();
  virtual ~MsgControl();

  MsgControl(const MsgControl& from);

  inline MsgControl& operator=(const MsgControl& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgControl& default_instance();

  void Swap(MsgControl* other);

  // implements Message ----------------------------------------------

  MsgControl* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgControl& from);
  void MergeFrom(const MsgControl& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 deviceId = 1;
  inline bool has_deviceid() const;
  inline void clear_deviceid();
  static const int kDeviceIdFieldNumber = 1;
  inline ::google::protobuf::int32 deviceid() const;
  inline void set_deviceid(::google::protobuf::int32 value);

  // optional int32 termId = 2;
  inline bool has_termid() const;
  inline void clear_termid();
  static const int kTermIdFieldNumber = 2;
  inline ::google::protobuf::int32 termid() const;
  inline void set_termid(::google::protobuf::int32 value);

  // optional int32 itemId = 3;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 3;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // optional double value = 4;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline double value() const;
  inline void set_value(double value);

  // @@protoc_insertion_point(class_scope:MsgControl)
 private:
  inline void set_has_deviceid();
  inline void clear_has_deviceid();
  inline void set_has_termid();
  inline void clear_has_termid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 deviceid_;
  ::google::protobuf::int32 termid_;
  double value_;
  ::google::protobuf::int32 itemid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_uarc_2eproto();
  friend void protobuf_AssignDesc_uarc_2eproto();
  friend void protobuf_ShutdownFile_uarc_2eproto();

  void InitAsDefaultInstance();
  static MsgControl* default_instance_;
};
// -------------------------------------------------------------------

class MsgFormular : public ::google::protobuf::Message {
 public:
  MsgFormular();
  virtual ~MsgFormular();

  MsgFormular(const MsgFormular& from);

  inline MsgFormular& operator=(const MsgFormular& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgFormular& default_instance();

  void Swap(MsgFormular* other);

  // implements Message ----------------------------------------------

  MsgFormular* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgFormular& from);
  void MergeFrom(const MsgFormular& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MsgFormular_FormularPriority FormularPriority;
  static const FormularPriority Level1 = MsgFormular_FormularPriority_Level1;
  static const FormularPriority Level2 = MsgFormular_FormularPriority_Level2;
  static const FormularPriority Level3 = MsgFormular_FormularPriority_Level3;
  static const FormularPriority Level4 = MsgFormular_FormularPriority_Level4;
  static const FormularPriority Level5 = MsgFormular_FormularPriority_Level5;
  static inline bool FormularPriority_IsValid(int value) {
    return MsgFormular_FormularPriority_IsValid(value);
  }
  static const FormularPriority FormularPriority_MIN =
    MsgFormular_FormularPriority_FormularPriority_MIN;
  static const FormularPriority FormularPriority_MAX =
    MsgFormular_FormularPriority_FormularPriority_MAX;
  static const int FormularPriority_ARRAYSIZE =
    MsgFormular_FormularPriority_FormularPriority_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FormularPriority_descriptor() {
    return MsgFormular_FormularPriority_descriptor();
  }
  static inline const ::std::string& FormularPriority_Name(FormularPriority value) {
    return MsgFormular_FormularPriority_Name(value);
  }
  static inline bool FormularPriority_Parse(const ::std::string& name,
      FormularPriority* value) {
    return MsgFormular_FormularPriority_Parse(name, value);
  }

  typedef MsgFormular_FormularStatus FormularStatus;
  static const FormularStatus FormularUnavailable = MsgFormular_FormularStatus_FormularUnavailable;
  static const FormularStatus FormularAvailable = MsgFormular_FormularStatus_FormularAvailable;
  static inline bool FormularStatus_IsValid(int value) {
    return MsgFormular_FormularStatus_IsValid(value);
  }
  static const FormularStatus FormularStatus_MIN =
    MsgFormular_FormularStatus_FormularStatus_MIN;
  static const FormularStatus FormularStatus_MAX =
    MsgFormular_FormularStatus_FormularStatus_MAX;
  static const int FormularStatus_ARRAYSIZE =
    MsgFormular_FormularStatus_FormularStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FormularStatus_descriptor() {
    return MsgFormular_FormularStatus_descriptor();
  }
  static inline const ::std::string& FormularStatus_Name(FormularStatus value) {
    return MsgFormular_FormularStatus_Name(value);
  }
  static inline bool FormularStatus_Parse(const ::std::string& name,
      FormularStatus* value) {
    return MsgFormular_FormularStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 formularId = 1;
  inline bool has_formularid() const;
  inline void clear_formularid();
  static const int kFormularIdFieldNumber = 1;
  inline ::google::protobuf::int32 formularid() const;
  inline void set_formularid(::google::protobuf::int32 value);

  // optional int32 itemId = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // optional string unitId = 3;
  inline bool has_unitid() const;
  inline void clear_unitid();
  static const int kUnitIdFieldNumber = 3;
  inline const ::std::string& unitid() const;
  inline void set_unitid(const ::std::string& value);
  inline void set_unitid(const char* value);
  inline void set_unitid(const char* value, size_t size);
  inline ::std::string* mutable_unitid();
  inline ::std::string* release_unitid();
  inline void set_allocated_unitid(::std::string* unitid);

  // optional string expr = 4;
  inline bool has_expr() const;
  inline void clear_expr();
  static const int kExprFieldNumber = 4;
  inline const ::std::string& expr() const;
  inline void set_expr(const ::std::string& value);
  inline void set_expr(const char* value);
  inline void set_expr(const char* value, size_t size);
  inline ::std::string* mutable_expr();
  inline ::std::string* release_expr();
  inline void set_allocated_expr(::std::string* expr);

  // repeated string params = 5;
  inline int params_size() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 5;
  inline const ::std::string& params(int index) const;
  inline ::std::string* mutable_params(int index);
  inline void set_params(int index, const ::std::string& value);
  inline void set_params(int index, const char* value);
  inline void set_params(int index, const char* value, size_t size);
  inline ::std::string* add_params();
  inline void add_params(const ::std::string& value);
  inline void add_params(const char* value);
  inline void add_params(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& params() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_params();

  // optional int32 mask = 6;
  inline bool has_mask() const;
  inline void clear_mask();
  static const int kMaskFieldNumber = 6;
  inline ::google::protobuf::int32 mask() const;
  inline void set_mask(::google::protobuf::int32 value);

  // optional .MsgFormular.FormularPriority priority = 7;
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 7;
  inline ::MsgFormular_FormularPriority priority() const;
  inline void set_priority(::MsgFormular_FormularPriority value);

  // optional int32 freq = 8;
  inline bool has_freq() const;
  inline void clear_freq();
  static const int kFreqFieldNumber = 8;
  inline ::google::protobuf::int32 freq() const;
  inline void set_freq(::google::protobuf::int32 value);

  // optional .MsgFormular.FormularStatus status = 9;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 9;
  inline ::MsgFormular_FormularStatus status() const;
  inline void set_status(::MsgFormular_FormularStatus value);

  // @@protoc_insertion_point(class_scope:MsgFormular)
 private:
  inline void set_has_formularid();
  inline void clear_has_formularid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_unitid();
  inline void clear_has_unitid();
  inline void set_has_expr();
  inline void clear_has_expr();
  inline void set_has_mask();
  inline void clear_has_mask();
  inline void set_has_priority();
  inline void clear_has_priority();
  inline void set_has_freq();
  inline void clear_has_freq();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 formularid_;
  ::google::protobuf::int32 itemid_;
  ::std::string* unitid_;
  ::std::string* expr_;
  ::google::protobuf::RepeatedPtrField< ::std::string> params_;
  ::google::protobuf::int32 mask_;
  int priority_;
  ::google::protobuf::int32 freq_;
  int status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_uarc_2eproto();
  friend void protobuf_AssignDesc_uarc_2eproto();
  friend void protobuf_ShutdownFile_uarc_2eproto();

  void InitAsDefaultInstance();
  static MsgFormular* default_instance_;
};
// -------------------------------------------------------------------

class MsgResult : public ::google::protobuf::Message {
 public:
  MsgResult();
  virtual ~MsgResult();

  MsgResult(const MsgResult& from);

  inline MsgResult& operator=(const MsgResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgResult& default_instance();

  void Swap(MsgResult* other);

  // implements Message ----------------------------------------------

  MsgResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgResult& from);
  void MergeFrom(const MsgResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MsgResult_ResultCode ResultCode;
  static const ResultCode Success = MsgResult_ResultCode_Success;
  static const ResultCode BadParamErr = MsgResult_ResultCode_BadParamErr;
  static const ResultCode DeviceOfflineErr = MsgResult_ResultCode_DeviceOfflineErr;
  static const ResultCode InternalErr = MsgResult_ResultCode_InternalErr;
  static inline bool ResultCode_IsValid(int value) {
    return MsgResult_ResultCode_IsValid(value);
  }
  static const ResultCode ResultCode_MIN =
    MsgResult_ResultCode_ResultCode_MIN;
  static const ResultCode ResultCode_MAX =
    MsgResult_ResultCode_ResultCode_MAX;
  static const int ResultCode_ARRAYSIZE =
    MsgResult_ResultCode_ResultCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResultCode_descriptor() {
    return MsgResult_ResultCode_descriptor();
  }
  static inline const ::std::string& ResultCode_Name(ResultCode value) {
    return MsgResult_ResultCode_Name(value);
  }
  static inline bool ResultCode_Parse(const ::std::string& name,
      ResultCode* value) {
    return MsgResult_ResultCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MsgResult.ResultCode result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MsgResult_ResultCode result() const;
  inline void set_result(::MsgResult_ResultCode value);

  // optional double resultDoubleVal = 2;
  inline bool has_resultdoubleval() const;
  inline void clear_resultdoubleval();
  static const int kResultDoubleValFieldNumber = 2;
  inline double resultdoubleval() const;
  inline void set_resultdoubleval(double value);

  // @@protoc_insertion_point(class_scope:MsgResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_resultdoubleval();
  inline void clear_has_resultdoubleval();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double resultdoubleval_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_uarc_2eproto();
  friend void protobuf_AssignDesc_uarc_2eproto();
  friend void protobuf_ShutdownFile_uarc_2eproto();

  void InitAsDefaultInstance();
  static MsgResult* default_instance_;
};
// -------------------------------------------------------------------

class MsgBatchResults : public ::google::protobuf::Message {
 public:
  MsgBatchResults();
  virtual ~MsgBatchResults();

  MsgBatchResults(const MsgBatchResults& from);

  inline MsgBatchResults& operator=(const MsgBatchResults& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgBatchResults& default_instance();

  void Swap(MsgBatchResults* other);

  // implements Message ----------------------------------------------

  MsgBatchResults* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgBatchResults& from);
  void MergeFrom(const MsgBatchResults& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MsgBatchResults_ResultBatchCode ResultBatchCode;
  static const ResultBatchCode Success = MsgBatchResults_ResultBatchCode_Success;
  static const ResultBatchCode BadParamErr = MsgBatchResults_ResultBatchCode_BadParamErr;
  static const ResultBatchCode DeviceOfflineErr = MsgBatchResults_ResultBatchCode_DeviceOfflineErr;
  static const ResultBatchCode InternalErr = MsgBatchResults_ResultBatchCode_InternalErr;
  static inline bool ResultBatchCode_IsValid(int value) {
    return MsgBatchResults_ResultBatchCode_IsValid(value);
  }
  static const ResultBatchCode ResultBatchCode_MIN =
    MsgBatchResults_ResultBatchCode_ResultBatchCode_MIN;
  static const ResultBatchCode ResultBatchCode_MAX =
    MsgBatchResults_ResultBatchCode_ResultBatchCode_MAX;
  static const int ResultBatchCode_ARRAYSIZE =
    MsgBatchResults_ResultBatchCode_ResultBatchCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResultBatchCode_descriptor() {
    return MsgBatchResults_ResultBatchCode_descriptor();
  }
  static inline const ::std::string& ResultBatchCode_Name(ResultBatchCode value) {
    return MsgBatchResults_ResultBatchCode_Name(value);
  }
  static inline bool ResultBatchCode_Parse(const ::std::string& name,
      ResultBatchCode* value) {
    return MsgBatchResults_ResultBatchCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .MsgBatchResults.ResultBatchCode result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::MsgBatchResults_ResultBatchCode result() const;
  inline void set_result(::MsgBatchResults_ResultBatchCode value);

  // repeated string unitIds = 2;
  inline int unitids_size() const;
  inline void clear_unitids();
  static const int kUnitIdsFieldNumber = 2;
  inline const ::std::string& unitids(int index) const;
  inline ::std::string* mutable_unitids(int index);
  inline void set_unitids(int index, const ::std::string& value);
  inline void set_unitids(int index, const char* value);
  inline void set_unitids(int index, const char* value, size_t size);
  inline ::std::string* add_unitids();
  inline void add_unitids(const ::std::string& value);
  inline void add_unitids(const char* value);
  inline void add_unitids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& unitids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_unitids();

  // repeated int32 itemIds = 3;
  inline int itemids_size() const;
  inline void clear_itemids();
  static const int kItemIdsFieldNumber = 3;
  inline ::google::protobuf::int32 itemids(int index) const;
  inline void set_itemids(int index, ::google::protobuf::int32 value);
  inline void add_itemids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      itemids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_itemids();

  // repeated double values = 4;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 4;
  inline double values(int index) const;
  inline void set_values(int index, double value);
  inline void add_values(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      values() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:MsgBatchResults)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> unitids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > itemids_;
  ::google::protobuf::RepeatedField< double > values_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_uarc_2eproto();
  friend void protobuf_AssignDesc_uarc_2eproto();
  friend void protobuf_ShutdownFile_uarc_2eproto();

  void InitAsDefaultInstance();
  static MsgBatchResults* default_instance_;
};
// ===================================================================

class UarcService_Stub;

class UarcService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline UarcService() {};
 public:
  virtual ~UarcService();

  typedef UarcService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void UarcSendSchedule(::google::protobuf::RpcController* controller,
                       const ::MsgSchedule* request,
                       ::MsgResult* response,
                       ::google::protobuf::Closure* done);
  virtual void UarcSetDevice(::google::protobuf::RpcController* controller,
                       const ::MsgDevice* request,
                       ::MsgResult* response,
                       ::google::protobuf::Closure* done);
  virtual void UarcSetCollTask(::google::protobuf::RpcController* controller,
                       const ::MsgCollTask* request,
                       ::MsgResult* response,
                       ::google::protobuf::Closure* done);
  virtual void UarcSetItemCode(::google::protobuf::RpcController* controller,
                       const ::MsgItemCode* request,
                       ::MsgResult* response,
                       ::google::protobuf::Closure* done);
  virtual void UarcSetFormular(::google::protobuf::RpcController* controller,
                       const ::MsgFormular* request,
                       ::MsgResult* response,
                       ::google::protobuf::Closure* done);
  virtual void UarcCallData(::google::protobuf::RpcController* controller,
                       const ::MsgCallData* request,
                       ::MsgResult* response,
                       ::google::protobuf::Closure* done);
  virtual void UarcBatchCallData(::google::protobuf::RpcController* controller,
                       const ::MsgBatchCallData* request,
                       ::MsgBatchResults* response,
                       ::google::protobuf::Closure* done);
  virtual void UarcDeviceControl(::google::protobuf::RpcController* controller,
                       const ::MsgControl* request,
                       ::MsgResult* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UarcService);
};

class UarcService_Stub : public UarcService {
 public:
  UarcService_Stub(::google::protobuf::RpcChannel* channel);
  UarcService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~UarcService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements UarcService ------------------------------------------

  void UarcSendSchedule(::google::protobuf::RpcController* controller,
                       const ::MsgSchedule* request,
                       ::MsgResult* response,
                       ::google::protobuf::Closure* done);
  void UarcSetDevice(::google::protobuf::RpcController* controller,
                       const ::MsgDevice* request,
                       ::MsgResult* response,
                       ::google::protobuf::Closure* done);
  void UarcSetCollTask(::google::protobuf::RpcController* controller,
                       const ::MsgCollTask* request,
                       ::MsgResult* response,
                       ::google::protobuf::Closure* done);
  void UarcSetItemCode(::google::protobuf::RpcController* controller,
                       const ::MsgItemCode* request,
                       ::MsgResult* response,
                       ::google::protobuf::Closure* done);
  void UarcSetFormular(::google::protobuf::RpcController* controller,
                       const ::MsgFormular* request,
                       ::MsgResult* response,
                       ::google::protobuf::Closure* done);
  void UarcCallData(::google::protobuf::RpcController* controller,
                       const ::MsgCallData* request,
                       ::MsgResult* response,
                       ::google::protobuf::Closure* done);
  void UarcBatchCallData(::google::protobuf::RpcController* controller,
                       const ::MsgBatchCallData* request,
                       ::MsgBatchResults* response,
                       ::google::protobuf::Closure* done);
  void UarcDeviceControl(::google::protobuf::RpcController* controller,
                       const ::MsgControl* request,
                       ::MsgResult* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UarcService_Stub);
};


// ===================================================================


// ===================================================================

// MsgScheduleValue

// optional int32 deviceId = 1;
inline bool MsgScheduleValue::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgScheduleValue::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgScheduleValue::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgScheduleValue::clear_deviceid() {
  deviceid_ = 0;
  clear_has_deviceid();
}
inline ::google::protobuf::int32 MsgScheduleValue::deviceid() const {
  return deviceid_;
}
inline void MsgScheduleValue::set_deviceid(::google::protobuf::int32 value) {
  set_has_deviceid();
  deviceid_ = value;
}

// optional int32 termId = 2;
inline bool MsgScheduleValue::has_termid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgScheduleValue::set_has_termid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgScheduleValue::clear_has_termid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgScheduleValue::clear_termid() {
  termid_ = 0;
  clear_has_termid();
}
inline ::google::protobuf::int32 MsgScheduleValue::termid() const {
  return termid_;
}
inline void MsgScheduleValue::set_termid(::google::protobuf::int32 value) {
  set_has_termid();
  termid_ = value;
}

// optional int32 itemId = 3;
inline bool MsgScheduleValue::has_itemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgScheduleValue::set_has_itemid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgScheduleValue::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgScheduleValue::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 MsgScheduleValue::itemid() const {
  return itemid_;
}
inline void MsgScheduleValue::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// repeated int32 scheduleTime = 4;
inline int MsgScheduleValue::scheduletime_size() const {
  return scheduletime_.size();
}
inline void MsgScheduleValue::clear_scheduletime() {
  scheduletime_.Clear();
}
inline ::google::protobuf::int32 MsgScheduleValue::scheduletime(int index) const {
  return scheduletime_.Get(index);
}
inline void MsgScheduleValue::set_scheduletime(int index, ::google::protobuf::int32 value) {
  scheduletime_.Set(index, value);
}
inline void MsgScheduleValue::add_scheduletime(::google::protobuf::int32 value) {
  scheduletime_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MsgScheduleValue::scheduletime() const {
  return scheduletime_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MsgScheduleValue::mutable_scheduletime() {
  return &scheduletime_;
}

// repeated double scheduleValue = 5;
inline int MsgScheduleValue::schedulevalue_size() const {
  return schedulevalue_.size();
}
inline void MsgScheduleValue::clear_schedulevalue() {
  schedulevalue_.Clear();
}
inline double MsgScheduleValue::schedulevalue(int index) const {
  return schedulevalue_.Get(index);
}
inline void MsgScheduleValue::set_schedulevalue(int index, double value) {
  schedulevalue_.Set(index, value);
}
inline void MsgScheduleValue::add_schedulevalue(double value) {
  schedulevalue_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
MsgScheduleValue::schedulevalue() const {
  return schedulevalue_;
}
inline ::google::protobuf::RepeatedField< double >*
MsgScheduleValue::mutable_schedulevalue() {
  return &schedulevalue_;
}

// -------------------------------------------------------------------

// MsgSchedule

// repeated .MsgScheduleValue scheduleValues = 1;
inline int MsgSchedule::schedulevalues_size() const {
  return schedulevalues_.size();
}
inline void MsgSchedule::clear_schedulevalues() {
  schedulevalues_.Clear();
}
inline const ::MsgScheduleValue& MsgSchedule::schedulevalues(int index) const {
  return schedulevalues_.Get(index);
}
inline ::MsgScheduleValue* MsgSchedule::mutable_schedulevalues(int index) {
  return schedulevalues_.Mutable(index);
}
inline ::MsgScheduleValue* MsgSchedule::add_schedulevalues() {
  return schedulevalues_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgScheduleValue >&
MsgSchedule::schedulevalues() const {
  return schedulevalues_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgScheduleValue >*
MsgSchedule::mutable_schedulevalues() {
  return &schedulevalues_;
}

// optional int32 date = 2;
inline bool MsgSchedule::has_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgSchedule::set_has_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgSchedule::clear_has_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgSchedule::clear_date() {
  date_ = 0;
  clear_has_date();
}
inline ::google::protobuf::int32 MsgSchedule::date() const {
  return date_;
}
inline void MsgSchedule::set_date(::google::protobuf::int32 value) {
  set_has_date();
  date_ = value;
}

// optional int32 startTime = 3;
inline bool MsgSchedule::has_starttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgSchedule::set_has_starttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgSchedule::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgSchedule::clear_starttime() {
  starttime_ = 0;
  clear_has_starttime();
}
inline ::google::protobuf::int32 MsgSchedule::starttime() const {
  return starttime_;
}
inline void MsgSchedule::set_starttime(::google::protobuf::int32 value) {
  set_has_starttime();
  starttime_ = value;
}

// optional int32 controlTime = 4;
inline bool MsgSchedule::has_controltime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgSchedule::set_has_controltime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgSchedule::clear_has_controltime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgSchedule::clear_controltime() {
  controltime_ = 0;
  clear_has_controltime();
}
inline ::google::protobuf::int32 MsgSchedule::controltime() const {
  return controltime_;
}
inline void MsgSchedule::set_controltime(::google::protobuf::int32 value) {
  set_has_controltime();
  controltime_ = value;
}

// -------------------------------------------------------------------

// MsgDevice

// optional int32 deviceId = 1;
inline bool MsgDevice::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgDevice::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgDevice::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgDevice::clear_deviceid() {
  deviceid_ = 0;
  clear_has_deviceid();
}
inline ::google::protobuf::int32 MsgDevice::deviceid() const {
  return deviceid_;
}
inline void MsgDevice::set_deviceid(::google::protobuf::int32 value) {
  set_has_deviceid();
  deviceid_ = value;
}

// optional string address = 2;
inline bool MsgDevice::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgDevice::set_has_address() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgDevice::clear_has_address() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgDevice::clear_address() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& MsgDevice::address() const {
  return *address_;
}
inline void MsgDevice::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void MsgDevice::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void MsgDevice::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgDevice::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  return address_;
}
inline ::std::string* MsgDevice::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgDevice::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 port = 3;
inline bool MsgDevice::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgDevice::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgDevice::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgDevice::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 MsgDevice::port() const {
  return port_;
}
inline void MsgDevice::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// optional string identity = 4;
inline bool MsgDevice::has_identity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgDevice::set_has_identity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgDevice::clear_has_identity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgDevice::clear_identity() {
  if (identity_ != &::google::protobuf::internal::kEmptyString) {
    identity_->clear();
  }
  clear_has_identity();
}
inline const ::std::string& MsgDevice::identity() const {
  return *identity_;
}
inline void MsgDevice::set_identity(const ::std::string& value) {
  set_has_identity();
  if (identity_ == &::google::protobuf::internal::kEmptyString) {
    identity_ = new ::std::string;
  }
  identity_->assign(value);
}
inline void MsgDevice::set_identity(const char* value) {
  set_has_identity();
  if (identity_ == &::google::protobuf::internal::kEmptyString) {
    identity_ = new ::std::string;
  }
  identity_->assign(value);
}
inline void MsgDevice::set_identity(const char* value, size_t size) {
  set_has_identity();
  if (identity_ == &::google::protobuf::internal::kEmptyString) {
    identity_ = new ::std::string;
  }
  identity_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgDevice::mutable_identity() {
  set_has_identity();
  if (identity_ == &::google::protobuf::internal::kEmptyString) {
    identity_ = new ::std::string;
  }
  return identity_;
}
inline ::std::string* MsgDevice::release_identity() {
  clear_has_identity();
  if (identity_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = identity_;
    identity_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgDevice::set_allocated_identity(::std::string* identity) {
  if (identity_ != &::google::protobuf::internal::kEmptyString) {
    delete identity_;
  }
  if (identity) {
    set_has_identity();
    identity_ = identity;
  } else {
    clear_has_identity();
    identity_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .MsgDevice.DeviceLinkType linkType = 5;
inline bool MsgDevice::has_linktype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgDevice::set_has_linktype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgDevice::clear_has_linktype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgDevice::clear_linktype() {
  linktype_ = 0;
  clear_has_linktype();
}
inline ::MsgDevice_DeviceLinkType MsgDevice::linktype() const {
  return static_cast< ::MsgDevice_DeviceLinkType >(linktype_);
}
inline void MsgDevice::set_linktype(::MsgDevice_DeviceLinkType value) {
  assert(::MsgDevice_DeviceLinkType_IsValid(value));
  set_has_linktype();
  linktype_ = value;
}

// optional .MsgDevice.DeviceProtocol protocol = 6;
inline bool MsgDevice::has_protocol() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgDevice::set_has_protocol() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgDevice::clear_has_protocol() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgDevice::clear_protocol() {
  protocol_ = 0;
  clear_has_protocol();
}
inline ::MsgDevice_DeviceProtocol MsgDevice::protocol() const {
  return static_cast< ::MsgDevice_DeviceProtocol >(protocol_);
}
inline void MsgDevice::set_protocol(::MsgDevice_DeviceProtocol value) {
  assert(::MsgDevice_DeviceProtocol_IsValid(value));
  set_has_protocol();
  protocol_ = value;
}

// optional int32 heartBeat = 7;
inline bool MsgDevice::has_heartbeat() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MsgDevice::set_has_heartbeat() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MsgDevice::clear_has_heartbeat() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MsgDevice::clear_heartbeat() {
  heartbeat_ = 0;
  clear_has_heartbeat();
}
inline ::google::protobuf::int32 MsgDevice::heartbeat() const {
  return heartbeat_;
}
inline void MsgDevice::set_heartbeat(::google::protobuf::int32 value) {
  set_has_heartbeat();
  heartbeat_ = value;
}

// optional .MsgDevice.DeviceStatus status = 8;
inline bool MsgDevice::has_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MsgDevice::set_has_status() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MsgDevice::clear_has_status() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MsgDevice::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::MsgDevice_DeviceStatus MsgDevice::status() const {
  return static_cast< ::MsgDevice_DeviceStatus >(status_);
}
inline void MsgDevice::set_status(::MsgDevice_DeviceStatus value) {
  assert(::MsgDevice_DeviceStatus_IsValid(value));
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// MsgItemCode

// optional int32 itemId = 1;
inline bool MsgItemCode::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgItemCode::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgItemCode::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgItemCode::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 MsgItemCode::itemid() const {
  return itemid_;
}
inline void MsgItemCode::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional string unitId = 2;
inline bool MsgItemCode::has_unitid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgItemCode::set_has_unitid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgItemCode::clear_has_unitid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgItemCode::clear_unitid() {
  if (unitid_ != &::google::protobuf::internal::kEmptyString) {
    unitid_->clear();
  }
  clear_has_unitid();
}
inline const ::std::string& MsgItemCode::unitid() const {
  return *unitid_;
}
inline void MsgItemCode::set_unitid(const ::std::string& value) {
  set_has_unitid();
  if (unitid_ == &::google::protobuf::internal::kEmptyString) {
    unitid_ = new ::std::string;
  }
  unitid_->assign(value);
}
inline void MsgItemCode::set_unitid(const char* value) {
  set_has_unitid();
  if (unitid_ == &::google::protobuf::internal::kEmptyString) {
    unitid_ = new ::std::string;
  }
  unitid_->assign(value);
}
inline void MsgItemCode::set_unitid(const char* value, size_t size) {
  set_has_unitid();
  if (unitid_ == &::google::protobuf::internal::kEmptyString) {
    unitid_ = new ::std::string;
  }
  unitid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgItemCode::mutable_unitid() {
  set_has_unitid();
  if (unitid_ == &::google::protobuf::internal::kEmptyString) {
    unitid_ = new ::std::string;
  }
  return unitid_;
}
inline ::std::string* MsgItemCode::release_unitid() {
  clear_has_unitid();
  if (unitid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unitid_;
    unitid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgItemCode::set_allocated_unitid(::std::string* unitid) {
  if (unitid_ != &::google::protobuf::internal::kEmptyString) {
    delete unitid_;
  }
  if (unitid) {
    set_has_unitid();
    unitid_ = unitid;
  } else {
    clear_has_unitid();
    unitid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 deviceId = 3;
inline bool MsgItemCode::has_deviceid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgItemCode::set_has_deviceid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgItemCode::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgItemCode::clear_deviceid() {
  deviceid_ = 0;
  clear_has_deviceid();
}
inline ::google::protobuf::int32 MsgItemCode::deviceid() const {
  return deviceid_;
}
inline void MsgItemCode::set_deviceid(::google::protobuf::int32 value) {
  set_has_deviceid();
  deviceid_ = value;
}

// optional .MsgItemCode.ItemCodeType itemType = 4;
inline bool MsgItemCode::has_itemtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgItemCode::set_has_itemtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgItemCode::clear_has_itemtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgItemCode::clear_itemtype() {
  itemtype_ = 0;
  clear_has_itemtype();
}
inline ::MsgItemCode_ItemCodeType MsgItemCode::itemtype() const {
  return static_cast< ::MsgItemCode_ItemCodeType >(itemtype_);
}
inline void MsgItemCode::set_itemtype(::MsgItemCode_ItemCodeType value) {
  assert(::MsgItemCode_ItemCodeType_IsValid(value));
  set_has_itemtype();
  itemtype_ = value;
}

// optional .MsgItemCode.ItemSrcType srcType = 5;
inline bool MsgItemCode::has_srctype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgItemCode::set_has_srctype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgItemCode::clear_has_srctype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgItemCode::clear_srctype() {
  srctype_ = 0;
  clear_has_srctype();
}
inline ::MsgItemCode_ItemSrcType MsgItemCode::srctype() const {
  return static_cast< ::MsgItemCode_ItemSrcType >(srctype_);
}
inline void MsgItemCode::set_srctype(::MsgItemCode_ItemSrcType value) {
  assert(::MsgItemCode_ItemSrcType_IsValid(value));
  set_has_srctype();
  srctype_ = value;
}

// optional double upLimit = 6;
inline bool MsgItemCode::has_uplimit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgItemCode::set_has_uplimit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgItemCode::clear_has_uplimit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgItemCode::clear_uplimit() {
  uplimit_ = 0;
  clear_has_uplimit();
}
inline double MsgItemCode::uplimit() const {
  return uplimit_;
}
inline void MsgItemCode::set_uplimit(double value) {
  set_has_uplimit();
  uplimit_ = value;
}

// optional double downLimit = 7;
inline bool MsgItemCode::has_downlimit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MsgItemCode::set_has_downlimit() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MsgItemCode::clear_has_downlimit() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MsgItemCode::clear_downlimit() {
  downlimit_ = 0;
  clear_has_downlimit();
}
inline double MsgItemCode::downlimit() const {
  return downlimit_;
}
inline void MsgItemCode::set_downlimit(double value) {
  set_has_downlimit();
  downlimit_ = value;
}

// optional .MsgItemCode.ItemWarnType warnType = 8;
inline bool MsgItemCode::has_warntype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MsgItemCode::set_has_warntype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MsgItemCode::clear_has_warntype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MsgItemCode::clear_warntype() {
  warntype_ = 0;
  clear_has_warntype();
}
inline ::MsgItemCode_ItemWarnType MsgItemCode::warntype() const {
  return static_cast< ::MsgItemCode_ItemWarnType >(warntype_);
}
inline void MsgItemCode::set_warntype(::MsgItemCode_ItemWarnType value) {
  assert(::MsgItemCode_ItemWarnType_IsValid(value));
  set_has_warntype();
  warntype_ = value;
}

// optional double baseval = 9;
inline bool MsgItemCode::has_baseval() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MsgItemCode::set_has_baseval() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MsgItemCode::clear_has_baseval() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MsgItemCode::clear_baseval() {
  baseval_ = 0;
  clear_has_baseval();
}
inline double MsgItemCode::baseval() const {
  return baseval_;
}
inline void MsgItemCode::set_baseval(double value) {
  set_has_baseval();
  baseval_ = value;
}

// optional double coefficient = 10;
inline bool MsgItemCode::has_coefficient() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MsgItemCode::set_has_coefficient() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MsgItemCode::clear_has_coefficient() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MsgItemCode::clear_coefficient() {
  coefficient_ = 0;
  clear_has_coefficient();
}
inline double MsgItemCode::coefficient() const {
  return coefficient_;
}
inline void MsgItemCode::set_coefficient(double value) {
  set_has_coefficient();
  coefficient_ = value;
}

// optional string dayStoreTime = 11;
inline bool MsgItemCode::has_daystoretime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MsgItemCode::set_has_daystoretime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MsgItemCode::clear_has_daystoretime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MsgItemCode::clear_daystoretime() {
  if (daystoretime_ != &::google::protobuf::internal::kEmptyString) {
    daystoretime_->clear();
  }
  clear_has_daystoretime();
}
inline const ::std::string& MsgItemCode::daystoretime() const {
  return *daystoretime_;
}
inline void MsgItemCode::set_daystoretime(const ::std::string& value) {
  set_has_daystoretime();
  if (daystoretime_ == &::google::protobuf::internal::kEmptyString) {
    daystoretime_ = new ::std::string;
  }
  daystoretime_->assign(value);
}
inline void MsgItemCode::set_daystoretime(const char* value) {
  set_has_daystoretime();
  if (daystoretime_ == &::google::protobuf::internal::kEmptyString) {
    daystoretime_ = new ::std::string;
  }
  daystoretime_->assign(value);
}
inline void MsgItemCode::set_daystoretime(const char* value, size_t size) {
  set_has_daystoretime();
  if (daystoretime_ == &::google::protobuf::internal::kEmptyString) {
    daystoretime_ = new ::std::string;
  }
  daystoretime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgItemCode::mutable_daystoretime() {
  set_has_daystoretime();
  if (daystoretime_ == &::google::protobuf::internal::kEmptyString) {
    daystoretime_ = new ::std::string;
  }
  return daystoretime_;
}
inline ::std::string* MsgItemCode::release_daystoretime() {
  clear_has_daystoretime();
  if (daystoretime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = daystoretime_;
    daystoretime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgItemCode::set_allocated_daystoretime(::std::string* daystoretime) {
  if (daystoretime_ != &::google::protobuf::internal::kEmptyString) {
    delete daystoretime_;
  }
  if (daystoretime) {
    set_has_daystoretime();
    daystoretime_ = daystoretime;
  } else {
    clear_has_daystoretime();
    daystoretime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string dayStoreSql = 12;
inline bool MsgItemCode::has_daystoresql() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MsgItemCode::set_has_daystoresql() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MsgItemCode::clear_has_daystoresql() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MsgItemCode::clear_daystoresql() {
  if (daystoresql_ != &::google::protobuf::internal::kEmptyString) {
    daystoresql_->clear();
  }
  clear_has_daystoresql();
}
inline const ::std::string& MsgItemCode::daystoresql() const {
  return *daystoresql_;
}
inline void MsgItemCode::set_daystoresql(const ::std::string& value) {
  set_has_daystoresql();
  if (daystoresql_ == &::google::protobuf::internal::kEmptyString) {
    daystoresql_ = new ::std::string;
  }
  daystoresql_->assign(value);
}
inline void MsgItemCode::set_daystoresql(const char* value) {
  set_has_daystoresql();
  if (daystoresql_ == &::google::protobuf::internal::kEmptyString) {
    daystoresql_ = new ::std::string;
  }
  daystoresql_->assign(value);
}
inline void MsgItemCode::set_daystoresql(const char* value, size_t size) {
  set_has_daystoresql();
  if (daystoresql_ == &::google::protobuf::internal::kEmptyString) {
    daystoresql_ = new ::std::string;
  }
  daystoresql_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgItemCode::mutable_daystoresql() {
  set_has_daystoresql();
  if (daystoresql_ == &::google::protobuf::internal::kEmptyString) {
    daystoresql_ = new ::std::string;
  }
  return daystoresql_;
}
inline ::std::string* MsgItemCode::release_daystoresql() {
  clear_has_daystoresql();
  if (daystoresql_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = daystoresql_;
    daystoresql_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgItemCode::set_allocated_daystoresql(::std::string* daystoresql) {
  if (daystoresql_ != &::google::protobuf::internal::kEmptyString) {
    delete daystoresql_;
  }
  if (daystoresql) {
    set_has_daystoresql();
    daystoresql_ = daystoresql;
  } else {
    clear_has_daystoresql();
    daystoresql_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .MsgItemCode.ItemCodeStatus status = 13;
inline bool MsgItemCode::has_status() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MsgItemCode::set_has_status() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MsgItemCode::clear_has_status() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MsgItemCode::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::MsgItemCode_ItemCodeStatus MsgItemCode::status() const {
  return static_cast< ::MsgItemCode_ItemCodeStatus >(status_);
}
inline void MsgItemCode::set_status(::MsgItemCode_ItemCodeStatus value) {
  assert(::MsgItemCode_ItemCodeStatus_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional int32 termId = 14;
inline bool MsgItemCode::has_termid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MsgItemCode::set_has_termid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MsgItemCode::clear_has_termid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MsgItemCode::clear_termid() {
  termid_ = 0;
  clear_has_termid();
}
inline ::google::protobuf::int32 MsgItemCode::termid() const {
  return termid_;
}
inline void MsgItemCode::set_termid(::google::protobuf::int32 value) {
  set_has_termid();
  termid_ = value;
}

// optional string warnStoreSql = 15;
inline bool MsgItemCode::has_warnstoresql() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MsgItemCode::set_has_warnstoresql() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MsgItemCode::clear_has_warnstoresql() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MsgItemCode::clear_warnstoresql() {
  if (warnstoresql_ != &::google::protobuf::internal::kEmptyString) {
    warnstoresql_->clear();
  }
  clear_has_warnstoresql();
}
inline const ::std::string& MsgItemCode::warnstoresql() const {
  return *warnstoresql_;
}
inline void MsgItemCode::set_warnstoresql(const ::std::string& value) {
  set_has_warnstoresql();
  if (warnstoresql_ == &::google::protobuf::internal::kEmptyString) {
    warnstoresql_ = new ::std::string;
  }
  warnstoresql_->assign(value);
}
inline void MsgItemCode::set_warnstoresql(const char* value) {
  set_has_warnstoresql();
  if (warnstoresql_ == &::google::protobuf::internal::kEmptyString) {
    warnstoresql_ = new ::std::string;
  }
  warnstoresql_->assign(value);
}
inline void MsgItemCode::set_warnstoresql(const char* value, size_t size) {
  set_has_warnstoresql();
  if (warnstoresql_ == &::google::protobuf::internal::kEmptyString) {
    warnstoresql_ = new ::std::string;
  }
  warnstoresql_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgItemCode::mutable_warnstoresql() {
  set_has_warnstoresql();
  if (warnstoresql_ == &::google::protobuf::internal::kEmptyString) {
    warnstoresql_ = new ::std::string;
  }
  return warnstoresql_;
}
inline ::std::string* MsgItemCode::release_warnstoresql() {
  clear_has_warnstoresql();
  if (warnstoresql_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = warnstoresql_;
    warnstoresql_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgItemCode::set_allocated_warnstoresql(::std::string* warnstoresql) {
  if (warnstoresql_ != &::google::protobuf::internal::kEmptyString) {
    delete warnstoresql_;
  }
  if (warnstoresql) {
    set_has_warnstoresql();
    warnstoresql_ = warnstoresql;
  } else {
    clear_has_warnstoresql();
    warnstoresql_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 secCollPeriod = 16;
inline bool MsgItemCode::has_seccollperiod() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MsgItemCode::set_has_seccollperiod() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MsgItemCode::clear_has_seccollperiod() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MsgItemCode::clear_seccollperiod() {
  seccollperiod_ = 0;
  clear_has_seccollperiod();
}
inline ::google::protobuf::int32 MsgItemCode::seccollperiod() const {
  return seccollperiod_;
}
inline void MsgItemCode::set_seccollperiod(::google::protobuf::int32 value) {
  set_has_seccollperiod();
  seccollperiod_ = value;
}

// optional string secCollSQL = 17;
inline bool MsgItemCode::has_seccollsql() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MsgItemCode::set_has_seccollsql() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MsgItemCode::clear_has_seccollsql() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MsgItemCode::clear_seccollsql() {
  if (seccollsql_ != &::google::protobuf::internal::kEmptyString) {
    seccollsql_->clear();
  }
  clear_has_seccollsql();
}
inline const ::std::string& MsgItemCode::seccollsql() const {
  return *seccollsql_;
}
inline void MsgItemCode::set_seccollsql(const ::std::string& value) {
  set_has_seccollsql();
  if (seccollsql_ == &::google::protobuf::internal::kEmptyString) {
    seccollsql_ = new ::std::string;
  }
  seccollsql_->assign(value);
}
inline void MsgItemCode::set_seccollsql(const char* value) {
  set_has_seccollsql();
  if (seccollsql_ == &::google::protobuf::internal::kEmptyString) {
    seccollsql_ = new ::std::string;
  }
  seccollsql_->assign(value);
}
inline void MsgItemCode::set_seccollsql(const char* value, size_t size) {
  set_has_seccollsql();
  if (seccollsql_ == &::google::protobuf::internal::kEmptyString) {
    seccollsql_ = new ::std::string;
  }
  seccollsql_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgItemCode::mutable_seccollsql() {
  set_has_seccollsql();
  if (seccollsql_ == &::google::protobuf::internal::kEmptyString) {
    seccollsql_ = new ::std::string;
  }
  return seccollsql_;
}
inline ::std::string* MsgItemCode::release_seccollsql() {
  clear_has_seccollsql();
  if (seccollsql_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = seccollsql_;
    seccollsql_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgItemCode::set_allocated_seccollsql(::std::string* seccollsql) {
  if (seccollsql_ != &::google::protobuf::internal::kEmptyString) {
    delete seccollsql_;
  }
  if (seccollsql) {
    set_has_seccollsql();
    seccollsql_ = seccollsql;
  } else {
    clear_has_seccollsql();
    seccollsql_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string secCollOtherSQL = 18;
inline bool MsgItemCode::has_seccollothersql() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MsgItemCode::set_has_seccollothersql() {
  _has_bits_[0] |= 0x00020000u;
}
inline void MsgItemCode::clear_has_seccollothersql() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void MsgItemCode::clear_seccollothersql() {
  if (seccollothersql_ != &::google::protobuf::internal::kEmptyString) {
    seccollothersql_->clear();
  }
  clear_has_seccollothersql();
}
inline const ::std::string& MsgItemCode::seccollothersql() const {
  return *seccollothersql_;
}
inline void MsgItemCode::set_seccollothersql(const ::std::string& value) {
  set_has_seccollothersql();
  if (seccollothersql_ == &::google::protobuf::internal::kEmptyString) {
    seccollothersql_ = new ::std::string;
  }
  seccollothersql_->assign(value);
}
inline void MsgItemCode::set_seccollothersql(const char* value) {
  set_has_seccollothersql();
  if (seccollothersql_ == &::google::protobuf::internal::kEmptyString) {
    seccollothersql_ = new ::std::string;
  }
  seccollothersql_->assign(value);
}
inline void MsgItemCode::set_seccollothersql(const char* value, size_t size) {
  set_has_seccollothersql();
  if (seccollothersql_ == &::google::protobuf::internal::kEmptyString) {
    seccollothersql_ = new ::std::string;
  }
  seccollothersql_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgItemCode::mutable_seccollothersql() {
  set_has_seccollothersql();
  if (seccollothersql_ == &::google::protobuf::internal::kEmptyString) {
    seccollothersql_ = new ::std::string;
  }
  return seccollothersql_;
}
inline ::std::string* MsgItemCode::release_seccollothersql() {
  clear_has_seccollothersql();
  if (seccollothersql_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = seccollothersql_;
    seccollothersql_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgItemCode::set_allocated_seccollothersql(::std::string* seccollothersql) {
  if (seccollothersql_ != &::google::protobuf::internal::kEmptyString) {
    delete seccollothersql_;
  }
  if (seccollothersql) {
    set_has_seccollothersql();
    seccollothersql_ = seccollothersql;
  } else {
    clear_has_seccollothersql();
    seccollothersql_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .MsgItemCode.ItemStoreType storeType = 19;
inline bool MsgItemCode::has_storetype() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void MsgItemCode::set_has_storetype() {
  _has_bits_[0] |= 0x00040000u;
}
inline void MsgItemCode::clear_has_storetype() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void MsgItemCode::clear_storetype() {
  storetype_ = 0;
  clear_has_storetype();
}
inline ::MsgItemCode_ItemStoreType MsgItemCode::storetype() const {
  return static_cast< ::MsgItemCode_ItemStoreType >(storetype_);
}
inline void MsgItemCode::set_storetype(::MsgItemCode_ItemStoreType value) {
  assert(::MsgItemCode_ItemStoreType_IsValid(value));
  set_has_storetype();
  storetype_ = value;
}

// -------------------------------------------------------------------

// MsgCollTask

// optional int32 taskId = 1;
inline bool MsgCollTask::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgCollTask::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgCollTask::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgCollTask::clear_taskid() {
  taskid_ = 0;
  clear_has_taskid();
}
inline ::google::protobuf::int32 MsgCollTask::taskid() const {
  return taskid_;
}
inline void MsgCollTask::set_taskid(::google::protobuf::int32 value) {
  set_has_taskid();
  taskid_ = value;
}

// optional string unitId = 2;
inline bool MsgCollTask::has_unitid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgCollTask::set_has_unitid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgCollTask::clear_has_unitid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgCollTask::clear_unitid() {
  if (unitid_ != &::google::protobuf::internal::kEmptyString) {
    unitid_->clear();
  }
  clear_has_unitid();
}
inline const ::std::string& MsgCollTask::unitid() const {
  return *unitid_;
}
inline void MsgCollTask::set_unitid(const ::std::string& value) {
  set_has_unitid();
  if (unitid_ == &::google::protobuf::internal::kEmptyString) {
    unitid_ = new ::std::string;
  }
  unitid_->assign(value);
}
inline void MsgCollTask::set_unitid(const char* value) {
  set_has_unitid();
  if (unitid_ == &::google::protobuf::internal::kEmptyString) {
    unitid_ = new ::std::string;
  }
  unitid_->assign(value);
}
inline void MsgCollTask::set_unitid(const char* value, size_t size) {
  set_has_unitid();
  if (unitid_ == &::google::protobuf::internal::kEmptyString) {
    unitid_ = new ::std::string;
  }
  unitid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgCollTask::mutable_unitid() {
  set_has_unitid();
  if (unitid_ == &::google::protobuf::internal::kEmptyString) {
    unitid_ = new ::std::string;
  }
  return unitid_;
}
inline ::std::string* MsgCollTask::release_unitid() {
  clear_has_unitid();
  if (unitid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unitid_;
    unitid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgCollTask::set_allocated_unitid(::std::string* unitid) {
  if (unitid_ != &::google::protobuf::internal::kEmptyString) {
    delete unitid_;
  }
  if (unitid) {
    set_has_unitid();
    unitid_ = unitid;
  } else {
    clear_has_unitid();
    unitid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .MsgItemCode itemIds = 3;
inline int MsgCollTask::itemids_size() const {
  return itemids_.size();
}
inline void MsgCollTask::clear_itemids() {
  itemids_.Clear();
}
inline const ::MsgItemCode& MsgCollTask::itemids(int index) const {
  return itemids_.Get(index);
}
inline ::MsgItemCode* MsgCollTask::mutable_itemids(int index) {
  return itemids_.Mutable(index);
}
inline ::MsgItemCode* MsgCollTask::add_itemids() {
  return itemids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgItemCode >&
MsgCollTask::itemids() const {
  return itemids_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgItemCode >*
MsgCollTask::mutable_itemids() {
  return &itemids_;
}

// optional int32 startDate = 4;
inline bool MsgCollTask::has_startdate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgCollTask::set_has_startdate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgCollTask::clear_has_startdate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgCollTask::clear_startdate() {
  startdate_ = 0;
  clear_has_startdate();
}
inline ::google::protobuf::int32 MsgCollTask::startdate() const {
  return startdate_;
}
inline void MsgCollTask::set_startdate(::google::protobuf::int32 value) {
  set_has_startdate();
  startdate_ = value;
}

// optional int32 freq = 5;
inline bool MsgCollTask::has_freq() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MsgCollTask::set_has_freq() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MsgCollTask::clear_has_freq() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MsgCollTask::clear_freq() {
  freq_ = 0;
  clear_has_freq();
}
inline ::google::protobuf::int32 MsgCollTask::freq() const {
  return freq_;
}
inline void MsgCollTask::set_freq(::google::protobuf::int32 value) {
  set_has_freq();
  freq_ = value;
}

// optional .MsgCollTask.TaskStatus status = 6;
inline bool MsgCollTask::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgCollTask::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgCollTask::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgCollTask::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::MsgCollTask_TaskStatus MsgCollTask::status() const {
  return static_cast< ::MsgCollTask_TaskStatus >(status_);
}
inline void MsgCollTask::set_status(::MsgCollTask_TaskStatus value) {
  assert(::MsgCollTask_TaskStatus_IsValid(value));
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// MsgCallData

// optional string unitId = 1;
inline bool MsgCallData::has_unitid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgCallData::set_has_unitid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgCallData::clear_has_unitid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgCallData::clear_unitid() {
  if (unitid_ != &::google::protobuf::internal::kEmptyString) {
    unitid_->clear();
  }
  clear_has_unitid();
}
inline const ::std::string& MsgCallData::unitid() const {
  return *unitid_;
}
inline void MsgCallData::set_unitid(const ::std::string& value) {
  set_has_unitid();
  if (unitid_ == &::google::protobuf::internal::kEmptyString) {
    unitid_ = new ::std::string;
  }
  unitid_->assign(value);
}
inline void MsgCallData::set_unitid(const char* value) {
  set_has_unitid();
  if (unitid_ == &::google::protobuf::internal::kEmptyString) {
    unitid_ = new ::std::string;
  }
  unitid_->assign(value);
}
inline void MsgCallData::set_unitid(const char* value, size_t size) {
  set_has_unitid();
  if (unitid_ == &::google::protobuf::internal::kEmptyString) {
    unitid_ = new ::std::string;
  }
  unitid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgCallData::mutable_unitid() {
  set_has_unitid();
  if (unitid_ == &::google::protobuf::internal::kEmptyString) {
    unitid_ = new ::std::string;
  }
  return unitid_;
}
inline ::std::string* MsgCallData::release_unitid() {
  clear_has_unitid();
  if (unitid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unitid_;
    unitid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgCallData::set_allocated_unitid(::std::string* unitid) {
  if (unitid_ != &::google::protobuf::internal::kEmptyString) {
    delete unitid_;
  }
  if (unitid) {
    set_has_unitid();
    unitid_ = unitid;
  } else {
    clear_has_unitid();
    unitid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 deviceId = 2;
inline bool MsgCallData::has_deviceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgCallData::set_has_deviceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgCallData::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgCallData::clear_deviceid() {
  deviceid_ = 0;
  clear_has_deviceid();
}
inline ::google::protobuf::int32 MsgCallData::deviceid() const {
  return deviceid_;
}
inline void MsgCallData::set_deviceid(::google::protobuf::int32 value) {
  set_has_deviceid();
  deviceid_ = value;
}

// optional int32 termId = 3;
inline bool MsgCallData::has_termid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgCallData::set_has_termid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgCallData::clear_has_termid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgCallData::clear_termid() {
  termid_ = 0;
  clear_has_termid();
}
inline ::google::protobuf::int32 MsgCallData::termid() const {
  return termid_;
}
inline void MsgCallData::set_termid(::google::protobuf::int32 value) {
  set_has_termid();
  termid_ = value;
}

// optional int32 itemId = 4;
inline bool MsgCallData::has_itemid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgCallData::set_has_itemid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgCallData::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgCallData::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 MsgCallData::itemid() const {
  return itemid_;
}
inline void MsgCallData::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// -------------------------------------------------------------------

// MsgBatchCallData

// repeated string unitIds = 1;
inline int MsgBatchCallData::unitids_size() const {
  return unitids_.size();
}
inline void MsgBatchCallData::clear_unitids() {
  unitids_.Clear();
}
inline const ::std::string& MsgBatchCallData::unitids(int index) const {
  return unitids_.Get(index);
}
inline ::std::string* MsgBatchCallData::mutable_unitids(int index) {
  return unitids_.Mutable(index);
}
inline void MsgBatchCallData::set_unitids(int index, const ::std::string& value) {
  unitids_.Mutable(index)->assign(value);
}
inline void MsgBatchCallData::set_unitids(int index, const char* value) {
  unitids_.Mutable(index)->assign(value);
}
inline void MsgBatchCallData::set_unitids(int index, const char* value, size_t size) {
  unitids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgBatchCallData::add_unitids() {
  return unitids_.Add();
}
inline void MsgBatchCallData::add_unitids(const ::std::string& value) {
  unitids_.Add()->assign(value);
}
inline void MsgBatchCallData::add_unitids(const char* value) {
  unitids_.Add()->assign(value);
}
inline void MsgBatchCallData::add_unitids(const char* value, size_t size) {
  unitids_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MsgBatchCallData::unitids() const {
  return unitids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MsgBatchCallData::mutable_unitids() {
  return &unitids_;
}

// repeated int32 itemIds = 2;
inline int MsgBatchCallData::itemids_size() const {
  return itemids_.size();
}
inline void MsgBatchCallData::clear_itemids() {
  itemids_.Clear();
}
inline ::google::protobuf::int32 MsgBatchCallData::itemids(int index) const {
  return itemids_.Get(index);
}
inline void MsgBatchCallData::set_itemids(int index, ::google::protobuf::int32 value) {
  itemids_.Set(index, value);
}
inline void MsgBatchCallData::add_itemids(::google::protobuf::int32 value) {
  itemids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MsgBatchCallData::itemids() const {
  return itemids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MsgBatchCallData::mutable_itemids() {
  return &itemids_;
}

// -------------------------------------------------------------------

// MsgControl

// optional int32 deviceId = 1;
inline bool MsgControl::has_deviceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgControl::set_has_deviceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgControl::clear_has_deviceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgControl::clear_deviceid() {
  deviceid_ = 0;
  clear_has_deviceid();
}
inline ::google::protobuf::int32 MsgControl::deviceid() const {
  return deviceid_;
}
inline void MsgControl::set_deviceid(::google::protobuf::int32 value) {
  set_has_deviceid();
  deviceid_ = value;
}

// optional int32 termId = 2;
inline bool MsgControl::has_termid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgControl::set_has_termid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgControl::clear_has_termid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgControl::clear_termid() {
  termid_ = 0;
  clear_has_termid();
}
inline ::google::protobuf::int32 MsgControl::termid() const {
  return termid_;
}
inline void MsgControl::set_termid(::google::protobuf::int32 value) {
  set_has_termid();
  termid_ = value;
}

// optional int32 itemId = 3;
inline bool MsgControl::has_itemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgControl::set_has_itemid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgControl::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgControl::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 MsgControl::itemid() const {
  return itemid_;
}
inline void MsgControl::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional double value = 4;
inline bool MsgControl::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgControl::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgControl::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgControl::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline double MsgControl::value() const {
  return value_;
}
inline void MsgControl::set_value(double value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// MsgFormular

// optional int32 formularId = 1;
inline bool MsgFormular::has_formularid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgFormular::set_has_formularid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgFormular::clear_has_formularid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgFormular::clear_formularid() {
  formularid_ = 0;
  clear_has_formularid();
}
inline ::google::protobuf::int32 MsgFormular::formularid() const {
  return formularid_;
}
inline void MsgFormular::set_formularid(::google::protobuf::int32 value) {
  set_has_formularid();
  formularid_ = value;
}

// optional int32 itemId = 2;
inline bool MsgFormular::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgFormular::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgFormular::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgFormular::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 MsgFormular::itemid() const {
  return itemid_;
}
inline void MsgFormular::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional string unitId = 3;
inline bool MsgFormular::has_unitid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MsgFormular::set_has_unitid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MsgFormular::clear_has_unitid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MsgFormular::clear_unitid() {
  if (unitid_ != &::google::protobuf::internal::kEmptyString) {
    unitid_->clear();
  }
  clear_has_unitid();
}
inline const ::std::string& MsgFormular::unitid() const {
  return *unitid_;
}
inline void MsgFormular::set_unitid(const ::std::string& value) {
  set_has_unitid();
  if (unitid_ == &::google::protobuf::internal::kEmptyString) {
    unitid_ = new ::std::string;
  }
  unitid_->assign(value);
}
inline void MsgFormular::set_unitid(const char* value) {
  set_has_unitid();
  if (unitid_ == &::google::protobuf::internal::kEmptyString) {
    unitid_ = new ::std::string;
  }
  unitid_->assign(value);
}
inline void MsgFormular::set_unitid(const char* value, size_t size) {
  set_has_unitid();
  if (unitid_ == &::google::protobuf::internal::kEmptyString) {
    unitid_ = new ::std::string;
  }
  unitid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgFormular::mutable_unitid() {
  set_has_unitid();
  if (unitid_ == &::google::protobuf::internal::kEmptyString) {
    unitid_ = new ::std::string;
  }
  return unitid_;
}
inline ::std::string* MsgFormular::release_unitid() {
  clear_has_unitid();
  if (unitid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unitid_;
    unitid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgFormular::set_allocated_unitid(::std::string* unitid) {
  if (unitid_ != &::google::protobuf::internal::kEmptyString) {
    delete unitid_;
  }
  if (unitid) {
    set_has_unitid();
    unitid_ = unitid;
  } else {
    clear_has_unitid();
    unitid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string expr = 4;
inline bool MsgFormular::has_expr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MsgFormular::set_has_expr() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MsgFormular::clear_has_expr() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MsgFormular::clear_expr() {
  if (expr_ != &::google::protobuf::internal::kEmptyString) {
    expr_->clear();
  }
  clear_has_expr();
}
inline const ::std::string& MsgFormular::expr() const {
  return *expr_;
}
inline void MsgFormular::set_expr(const ::std::string& value) {
  set_has_expr();
  if (expr_ == &::google::protobuf::internal::kEmptyString) {
    expr_ = new ::std::string;
  }
  expr_->assign(value);
}
inline void MsgFormular::set_expr(const char* value) {
  set_has_expr();
  if (expr_ == &::google::protobuf::internal::kEmptyString) {
    expr_ = new ::std::string;
  }
  expr_->assign(value);
}
inline void MsgFormular::set_expr(const char* value, size_t size) {
  set_has_expr();
  if (expr_ == &::google::protobuf::internal::kEmptyString) {
    expr_ = new ::std::string;
  }
  expr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgFormular::mutable_expr() {
  set_has_expr();
  if (expr_ == &::google::protobuf::internal::kEmptyString) {
    expr_ = new ::std::string;
  }
  return expr_;
}
inline ::std::string* MsgFormular::release_expr() {
  clear_has_expr();
  if (expr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = expr_;
    expr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgFormular::set_allocated_expr(::std::string* expr) {
  if (expr_ != &::google::protobuf::internal::kEmptyString) {
    delete expr_;
  }
  if (expr) {
    set_has_expr();
    expr_ = expr;
  } else {
    clear_has_expr();
    expr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string params = 5;
inline int MsgFormular::params_size() const {
  return params_.size();
}
inline void MsgFormular::clear_params() {
  params_.Clear();
}
inline const ::std::string& MsgFormular::params(int index) const {
  return params_.Get(index);
}
inline ::std::string* MsgFormular::mutable_params(int index) {
  return params_.Mutable(index);
}
inline void MsgFormular::set_params(int index, const ::std::string& value) {
  params_.Mutable(index)->assign(value);
}
inline void MsgFormular::set_params(int index, const char* value) {
  params_.Mutable(index)->assign(value);
}
inline void MsgFormular::set_params(int index, const char* value, size_t size) {
  params_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgFormular::add_params() {
  return params_.Add();
}
inline void MsgFormular::add_params(const ::std::string& value) {
  params_.Add()->assign(value);
}
inline void MsgFormular::add_params(const char* value) {
  params_.Add()->assign(value);
}
inline void MsgFormular::add_params(const char* value, size_t size) {
  params_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MsgFormular::params() const {
  return params_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MsgFormular::mutable_params() {
  return &params_;
}

// optional int32 mask = 6;
inline bool MsgFormular::has_mask() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MsgFormular::set_has_mask() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MsgFormular::clear_has_mask() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MsgFormular::clear_mask() {
  mask_ = 0;
  clear_has_mask();
}
inline ::google::protobuf::int32 MsgFormular::mask() const {
  return mask_;
}
inline void MsgFormular::set_mask(::google::protobuf::int32 value) {
  set_has_mask();
  mask_ = value;
}

// optional .MsgFormular.FormularPriority priority = 7;
inline bool MsgFormular::has_priority() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MsgFormular::set_has_priority() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MsgFormular::clear_has_priority() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MsgFormular::clear_priority() {
  priority_ = 1;
  clear_has_priority();
}
inline ::MsgFormular_FormularPriority MsgFormular::priority() const {
  return static_cast< ::MsgFormular_FormularPriority >(priority_);
}
inline void MsgFormular::set_priority(::MsgFormular_FormularPriority value) {
  assert(::MsgFormular_FormularPriority_IsValid(value));
  set_has_priority();
  priority_ = value;
}

// optional int32 freq = 8;
inline bool MsgFormular::has_freq() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MsgFormular::set_has_freq() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MsgFormular::clear_has_freq() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MsgFormular::clear_freq() {
  freq_ = 0;
  clear_has_freq();
}
inline ::google::protobuf::int32 MsgFormular::freq() const {
  return freq_;
}
inline void MsgFormular::set_freq(::google::protobuf::int32 value) {
  set_has_freq();
  freq_ = value;
}

// optional .MsgFormular.FormularStatus status = 9;
inline bool MsgFormular::has_status() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MsgFormular::set_has_status() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MsgFormular::clear_has_status() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MsgFormular::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::MsgFormular_FormularStatus MsgFormular::status() const {
  return static_cast< ::MsgFormular_FormularStatus >(status_);
}
inline void MsgFormular::set_status(::MsgFormular_FormularStatus value) {
  assert(::MsgFormular_FormularStatus_IsValid(value));
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// MsgResult

// optional .MsgResult.ResultCode result = 1;
inline bool MsgResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MsgResult_ResultCode MsgResult::result() const {
  return static_cast< ::MsgResult_ResultCode >(result_);
}
inline void MsgResult::set_result(::MsgResult_ResultCode value) {
  assert(::MsgResult_ResultCode_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional double resultDoubleVal = 2;
inline bool MsgResult::has_resultdoubleval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgResult::set_has_resultdoubleval() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgResult::clear_has_resultdoubleval() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgResult::clear_resultdoubleval() {
  resultdoubleval_ = 0;
  clear_has_resultdoubleval();
}
inline double MsgResult::resultdoubleval() const {
  return resultdoubleval_;
}
inline void MsgResult::set_resultdoubleval(double value) {
  set_has_resultdoubleval();
  resultdoubleval_ = value;
}

// -------------------------------------------------------------------

// MsgBatchResults

// optional .MsgBatchResults.ResultBatchCode result = 1;
inline bool MsgBatchResults::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgBatchResults::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgBatchResults::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgBatchResults::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::MsgBatchResults_ResultBatchCode MsgBatchResults::result() const {
  return static_cast< ::MsgBatchResults_ResultBatchCode >(result_);
}
inline void MsgBatchResults::set_result(::MsgBatchResults_ResultBatchCode value) {
  assert(::MsgBatchResults_ResultBatchCode_IsValid(value));
  set_has_result();
  result_ = value;
}

// repeated string unitIds = 2;
inline int MsgBatchResults::unitids_size() const {
  return unitids_.size();
}
inline void MsgBatchResults::clear_unitids() {
  unitids_.Clear();
}
inline const ::std::string& MsgBatchResults::unitids(int index) const {
  return unitids_.Get(index);
}
inline ::std::string* MsgBatchResults::mutable_unitids(int index) {
  return unitids_.Mutable(index);
}
inline void MsgBatchResults::set_unitids(int index, const ::std::string& value) {
  unitids_.Mutable(index)->assign(value);
}
inline void MsgBatchResults::set_unitids(int index, const char* value) {
  unitids_.Mutable(index)->assign(value);
}
inline void MsgBatchResults::set_unitids(int index, const char* value, size_t size) {
  unitids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgBatchResults::add_unitids() {
  return unitids_.Add();
}
inline void MsgBatchResults::add_unitids(const ::std::string& value) {
  unitids_.Add()->assign(value);
}
inline void MsgBatchResults::add_unitids(const char* value) {
  unitids_.Add()->assign(value);
}
inline void MsgBatchResults::add_unitids(const char* value, size_t size) {
  unitids_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MsgBatchResults::unitids() const {
  return unitids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MsgBatchResults::mutable_unitids() {
  return &unitids_;
}

// repeated int32 itemIds = 3;
inline int MsgBatchResults::itemids_size() const {
  return itemids_.size();
}
inline void MsgBatchResults::clear_itemids() {
  itemids_.Clear();
}
inline ::google::protobuf::int32 MsgBatchResults::itemids(int index) const {
  return itemids_.Get(index);
}
inline void MsgBatchResults::set_itemids(int index, ::google::protobuf::int32 value) {
  itemids_.Set(index, value);
}
inline void MsgBatchResults::add_itemids(::google::protobuf::int32 value) {
  itemids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MsgBatchResults::itemids() const {
  return itemids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MsgBatchResults::mutable_itemids() {
  return &itemids_;
}

// repeated double values = 4;
inline int MsgBatchResults::values_size() const {
  return values_.size();
}
inline void MsgBatchResults::clear_values() {
  values_.Clear();
}
inline double MsgBatchResults::values(int index) const {
  return values_.Get(index);
}
inline void MsgBatchResults::set_values(int index, double value) {
  values_.Set(index, value);
}
inline void MsgBatchResults::add_values(double value) {
  values_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
MsgBatchResults::values() const {
  return values_;
}
inline ::google::protobuf::RepeatedField< double >*
MsgBatchResults::mutable_values() {
  return &values_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgDevice_DeviceLinkType>() {
  return ::MsgDevice_DeviceLinkType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgDevice_DeviceProtocol>() {
  return ::MsgDevice_DeviceProtocol_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgDevice_DeviceStatus>() {
  return ::MsgDevice_DeviceStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgItemCode_ItemCodeType>() {
  return ::MsgItemCode_ItemCodeType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgItemCode_ItemSrcType>() {
  return ::MsgItemCode_ItemSrcType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgItemCode_ItemWarnType>() {
  return ::MsgItemCode_ItemWarnType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgItemCode_ItemCodeStatus>() {
  return ::MsgItemCode_ItemCodeStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgItemCode_ItemStoreType>() {
  return ::MsgItemCode_ItemStoreType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgCollTask_TaskStatus>() {
  return ::MsgCollTask_TaskStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgFormular_FormularPriority>() {
  return ::MsgFormular_FormularPriority_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgFormular_FormularStatus>() {
  return ::MsgFormular_FormularStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgResult_ResultCode>() {
  return ::MsgResult_ResultCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MsgBatchResults_ResultBatchCode>() {
  return ::MsgBatchResults_ResultBatchCode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_uarc_2eproto__INCLUDED
